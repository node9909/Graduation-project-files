
ADS1298_READ_ID_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004278  08004278  00014278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a40  200001e0  08004544  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001c20  08004544  00021c20  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006657  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00017131  00000000  00000000  00026867  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000037cc  00000000  00000000  0003d998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c18  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d70  00000000  00000000  00041d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007921  00000000  00000000  00042af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004300  00000000  00000000  0004a411  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004e711  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002350  00000000  00000000  0004e790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004260 	.word	0x08004260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08004260 	.word	0x08004260

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005a6:	e003      	b.n	80005b0 <LoopCopyDataInit>

080005a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ae:	3104      	adds	r1, #4

080005b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b8:	d3f6      	bcc.n	80005a8 <CopyDataInit>
  ldr  r2, =_sbss
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005bc:	e002      	b.n	80005c4 <LoopFillZerobss>

080005be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005c0:	f842 3b04 	str.w	r3, [r2], #4

080005c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c8:	d3f9      	bcc.n	80005be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ca:	f000 fd53 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ce:	f003 f9ef 	bl	80039b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005d2:	f000 f967 	bl	80008a4 <main>
  bx  lr    
 80005d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005dc:	08004364 	.word	0x08004364
  ldr  r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005e4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80005e8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80005ec:	20001c20 	.word	0x20001c20

080005f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005f4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <_sbrk+0x2c>)
 80005f8:	6819      	ldr	r1, [r3, #0]
{
 80005fa:	4602      	mov	r2, r0
	if (heap_end == 0)
 80005fc:	b909      	cbnz	r1, 8000602 <_sbrk+0xe>
		heap_end = &end;
 80005fe:	4909      	ldr	r1, [pc, #36]	; (8000624 <_sbrk+0x30>)
 8000600:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8000602:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000604:	4669      	mov	r1, sp
 8000606:	4402      	add	r2, r0
 8000608:	428a      	cmp	r2, r1
 800060a:	d906      	bls.n	800061a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800060c:	f003 f9ca 	bl	80039a4 <__errno>
 8000610:	230c      	movs	r3, #12
 8000612:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800061a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800061c:	bd08      	pop	{r3, pc}
 800061e:	bf00      	nop
 8000620:	200001fc 	.word	0x200001fc
 8000624:	20001c20 	.word	0x20001c20

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062c:	2230      	movs	r2, #48	; 0x30
 800062e:	2100      	movs	r1, #0
 8000630:	a808      	add	r0, sp, #32
 8000632:	f003 f9f1 	bl	8003a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000636:	2100      	movs	r1, #0
 8000638:	2214      	movs	r2, #20
 800063a:	a803      	add	r0, sp, #12
 800063c:	f003 f9ec 	bl	8003a18 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2500      	movs	r5, #0
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <SystemClock_Config+0x90>)
 8000644:	9501      	str	r5, [sp, #4]
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <SystemClock_Config+0x94>)
 800065a:	9502      	str	r5, [sp, #8]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066e:	2301      	movs	r3, #1
 8000670:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000676:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000682:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000686:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800068a:	2303      	movs	r3, #3
 800068c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f001 fb7d 	bl	8001d90 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f001 fd27 	bl	80020fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80006ae:	f001 fcf1 	bl	8002094 <HAL_RCC_EnableCSS>
}
 80006b2:	b015      	add	sp, #84	; 0x54
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <transferSPI>:
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/*------------ SPI --------------------*/
uint8_t transferSPI(uint8_t send){
 80006c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t rx = 0x00;
 80006c2:	aa06      	add	r2, sp, #24
 80006c4:	2300      	movs	r3, #0
 80006c6:	f802 3d01 	strb.w	r3, [r2, #-1]!

	HAL_SPI_TransmitReceive(&hspi1, &send, &rx, sizeof(rx),0x1000);
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
uint8_t transferSPI(uint8_t send){
 80006ce:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi1, &send, &rx, sizeof(rx),0x1000);
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	f10d 010f 	add.w	r1, sp, #15
 80006d8:	2301      	movs	r3, #1
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <transferSPI+0x2c>)
 80006dc:	f001 fe67 	bl	80023ae <HAL_SPI_TransmitReceive>

	return rx;
}
 80006e0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80006e4:	b007      	add	sp, #28
 80006e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ea:	bf00      	nop
 80006ec:	2000031c 	.word	0x2000031c

080006f0 <ADS_SEND_COMMAND>:
{
 80006f0:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//  Open SPI
 80006f2:	4c08      	ldr	r4, [pc, #32]	; (8000714 <ADS_SEND_COMMAND+0x24>)
{
 80006f4:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//  Open SPI
 80006f6:	2200      	movs	r2, #0
 80006f8:	2120      	movs	r1, #32
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 fe84 	bl	8001408 <HAL_GPIO_WritePin>
	transferSPI(cmd); 		//  opcode1
 8000700:	4628      	mov	r0, r5
 8000702:	f7ff ffdd 	bl	80006c0 <transferSPI>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);		//  close SPI
 8000706:	4620      	mov	r0, r4
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
}
 800070c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);		//  close SPI
 8000710:	f000 be7a 	b.w	8001408 <HAL_GPIO_WritePin>
 8000714:	40020800 	.word	0x40020800

08000718 <ADS_RREG>:
uint8_t ADS_RREG(uint8_t reg){		//  reads ONE register at _address
 8000718:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);			//  open SPI
 800071a:	4c0c      	ldr	r4, [pc, #48]	; (800074c <ADS_RREG+0x34>)
 800071c:	2200      	movs	r2, #0
 800071e:	2120      	movs	r1, #32
uint8_t ADS_RREG(uint8_t reg){		//  reads ONE register at _address
 8000720:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);			//  open SPI
 8000722:	4620      	mov	r0, r4
 8000724:	f000 fe70 	bl	8001408 <HAL_GPIO_WritePin>
	transferSPI(RREG|reg ); 								//  opcode1
 8000728:	f045 0020 	orr.w	r0, r5, #32
 800072c:	f7ff ffc8 	bl	80006c0 <transferSPI>
	transferSPI(0); 											//  opcode2
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ffc5 	bl	80006c0 <transferSPI>
	val = transferSPI(0);		//  update mirror location with returned byte
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ffc2 	bl	80006c0 <transferSPI>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);				//  close SPI
 800073c:	2201      	movs	r2, #1
	val = transferSPI(0);		//  update mirror location with returned byte
 800073e:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);				//  close SPI
 8000740:	2120      	movs	r1, #32
 8000742:	4620      	mov	r0, r4
 8000744:	f000 fe60 	bl	8001408 <HAL_GPIO_WritePin>
}
 8000748:	4628      	mov	r0, r5
 800074a:	bd38      	pop	{r3, r4, r5, pc}
 800074c:	40020800 	.word	0x40020800

08000750 <READ_ID>:
{
 8000750:	b510      	push	{r4, lr}
	HAL_Delay(400);
 8000752:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000756:	f000 fd03 	bl	8001160 <HAL_Delay>
	ADS_SEND_COMMAND(SDATAC);
 800075a:	2011      	movs	r0, #17
 800075c:	f7ff ffc8 	bl	80006f0 <ADS_SEND_COMMAND>
	HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fcfd 	bl	8001160 <HAL_Delay>
	gIDval = ADS_RREG(ID);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ffd6 	bl	8000718 <ADS_RREG>
 800076c:	4604      	mov	r4, r0
	HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	f000 fcf6 	bl	8001160 <HAL_Delay>
}
 8000774:	4620      	mov	r0, r4
 8000776:	bd10      	pop	{r4, pc}

08000778 <ADS_WREG>:
{
 8000778:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800077a:	4c0c      	ldr	r4, [pc, #48]	; (80007ac <ADS_WREG+0x34>)
 800077c:	2200      	movs	r2, #0
{
 800077e:	4606      	mov	r6, r0
 8000780:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000782:	4620      	mov	r0, r4
 8000784:	2120      	movs	r1, #32
 8000786:	f000 fe3f 	bl	8001408 <HAL_GPIO_WritePin>
	transferSPI(WREG |reg);
 800078a:	f046 0040 	orr.w	r0, r6, #64	; 0x40
 800078e:	f7ff ff97 	bl	80006c0 <transferSPI>
	transferSPI(0x00);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff94 	bl	80006c0 <transferSPI>
	transferSPI(val);
 8000798:	4628      	mov	r0, r5
 800079a:	f7ff ff91 	bl	80006c0 <transferSPI>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800079e:	4620      	mov	r0, r4
 80007a0:	2201      	movs	r2, #1
 80007a2:	2120      	movs	r1, #32
}
 80007a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007a8:	f000 be2e 	b.w	8001408 <HAL_GPIO_WritePin>
 80007ac:	40020800 	.word	0x40020800

080007b0 <ADS1298_Init>:
{
 80007b0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, RESET_Pin, GPIO_PIN_RESET);
 80007b2:	4c3b      	ldr	r4, [pc, #236]	; (80008a0 <ADS1298_Init+0xf0>)
	HAL_Delay(100);
 80007b4:	2064      	movs	r0, #100	; 0x64
 80007b6:	f000 fcd3 	bl	8001160 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RESET_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	4620      	mov	r0, r4
 80007c2:	f000 fe21 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fcca 	bl	8001160 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RESET_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d2:	4620      	mov	r0, r4
 80007d4:	f000 fe18 	bl	8001408 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007dc:	f000 fcc0 	bl	8001160 <HAL_Delay>
	ADS_SEND_COMMAND(SDATAC);
 80007e0:	2011      	movs	r0, #17
 80007e2:	f7ff ff85 	bl	80006f0 <ADS_SEND_COMMAND>
	HAL_Delay(100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f000 fcba 	bl	8001160 <HAL_Delay>
	ADS_WREG(CONFIG3,0xC0);
 80007ec:	21c0      	movs	r1, #192	; 0xc0
 80007ee:	2003      	movs	r0, #3
 80007f0:	f7ff ffc2 	bl	8000778 <ADS_WREG>
	HAL_Delay(500);
 80007f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f8:	f000 fcb2 	bl	8001160 <HAL_Delay>
	ADS_WREG(CONFIG1,0x06); //04 = 100,03 = 2000, 05 = 500, 06 = 250
 80007fc:	2106      	movs	r1, #6
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ffba 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f000 fcab 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH1SET,0x10);
 800080a:	2110      	movs	r1, #16
 800080c:	2005      	movs	r0, #5
 800080e:	f7ff ffb3 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000812:	2064      	movs	r0, #100	; 0x64
 8000814:	f000 fca4 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH2SET,0x10);
 8000818:	2110      	movs	r1, #16
 800081a:	2006      	movs	r0, #6
 800081c:	f7ff ffac 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f000 fc9d 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH3SET,0x91);
 8000826:	2191      	movs	r1, #145	; 0x91
 8000828:	2007      	movs	r0, #7
 800082a:	f7ff ffa5 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f000 fc96 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH4SET,0x91);
 8000834:	2191      	movs	r1, #145	; 0x91
 8000836:	2008      	movs	r0, #8
 8000838:	f7ff ff9e 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f000 fc8f 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH5SET,0x91);
 8000842:	2191      	movs	r1, #145	; 0x91
 8000844:	2009      	movs	r0, #9
 8000846:	f7ff ff97 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 800084a:	2064      	movs	r0, #100	; 0x64
 800084c:	f000 fc88 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH6SET,0x91);
 8000850:	2191      	movs	r1, #145	; 0x91
 8000852:	200a      	movs	r0, #10
 8000854:	f7ff ff90 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f000 fc81 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH7SET,0x91);
 800085e:	2191      	movs	r1, #145	; 0x91
 8000860:	200b      	movs	r0, #11
 8000862:	f7ff ff89 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000866:	2064      	movs	r0, #100	; 0x64
 8000868:	f000 fc7a 	bl	8001160 <HAL_Delay>
	ADS_WREG(CH8SET,0x91);
 800086c:	2191      	movs	r1, #145	; 0x91
 800086e:	200c      	movs	r0, #12
 8000870:	f7ff ff82 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f000 fc73 	bl	8001160 <HAL_Delay>
	ADS_WREG(GPIO, 0x00);
 800087a:	2100      	movs	r1, #0
 800087c:	2014      	movs	r0, #20
 800087e:	f7ff ff7b 	bl	8000778 <ADS_WREG>
	HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 fc6c 	bl	8001160 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, START_Pin, GPIO_PIN_SET);
 8000888:	4620      	mov	r0, r4
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	f000 fdba 	bl	8001408 <HAL_GPIO_WritePin>
	ADS_SEND_COMMAND(RDATAC);
 8000894:	2010      	movs	r0, #16
}
 8000896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ADS_SEND_COMMAND(RDATAC);
 800089a:	f7ff bf29 	b.w	80006f0 <ADS_SEND_COMMAND>
 800089e:	bf00      	nop
 80008a0:	40020400 	.word	0x40020400

080008a4 <main>:
{
 80008a4:	b580      	push	{r7, lr}
	uint8_t mybuff[20] = "Hello world\r\n";
 80008a6:	4b6f      	ldr	r3, [pc, #444]	; (8000a64 <main+0x1c0>)
{
 80008a8:	b090      	sub	sp, #64	; 0x40
	uint8_t mybuff[20] = "Hello world\r\n";
 80008aa:	aa06      	add	r2, sp, #24
 80008ac:	f103 0508 	add.w	r5, r3, #8
 80008b0:	4616      	mov	r6, r2
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	6859      	ldr	r1, [r3, #4]
 80008b6:	4614      	mov	r4, r2
 80008b8:	c403      	stmia	r4!, {r0, r1}
 80008ba:	3308      	adds	r3, #8
 80008bc:	42ab      	cmp	r3, r5
 80008be:	4622      	mov	r2, r4
 80008c0:	d1f7      	bne.n	80008b2 <main+0xe>
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	80a3      	strh	r3, [r4, #4]
 80008c8:	6020      	str	r0, [r4, #0]
 80008ca:	2400      	movs	r4, #0
 80008cc:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 80008d0:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
  HAL_Init();
 80008d4:	f000 fc18 	bl	8001108 <HAL_Init>
  SystemClock_Config();
 80008d8:	f7ff fea6 	bl	8000628 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2214      	movs	r2, #20
 80008de:	4621      	mov	r1, r4
 80008e0:	a80b      	add	r0, sp, #44	; 0x2c
 80008e2:	f003 f899 	bl	8003a18 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <main+0x1c4>)
 80008e8:	9401      	str	r4, [sp, #4]
 80008ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80008ec:	485f      	ldr	r0, [pc, #380]	; (8000a6c <main+0x1c8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
 80008f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80008fa:	9201      	str	r2, [sp, #4]
 80008fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	9402      	str	r4, [sp, #8]
 8000900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000902:	f042 0201 	orr.w	r2, r2, #1
 8000906:	631a      	str	r2, [r3, #48]	; 0x30
 8000908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800090a:	f002 0201 	and.w	r2, r2, #1
 800090e:	9202      	str	r2, [sp, #8]
 8000910:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	9403      	str	r4, [sp, #12]
 8000914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000916:	f042 0204 	orr.w	r2, r2, #4
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
 800091c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800091e:	f002 0204 	and.w	r2, r2, #4
 8000922:	9203      	str	r2, [sp, #12]
 8000924:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	9404      	str	r4, [sp, #16]
 8000928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092a:	f042 0202 	orr.w	r2, r2, #2
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
 8000930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000932:	f002 0202 	and.w	r2, r2, #2
 8000936:	9204      	str	r2, [sp, #16]
 8000938:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	9405      	str	r4, [sp, #20]
 800093c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093e:	f042 0208 	orr.w	r2, r2, #8
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000950:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000952:	f000 fd59 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_Pin, GPIO_PIN_SET); // Reset pin needs to be high
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	4844      	ldr	r0, [pc, #272]	; (8000a70 <main+0x1cc>)
 800095e:	f000 fd53 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CLK_SEL_Pin|START_Pin, GPIO_PIN_RESET);
 8000962:	4622      	mov	r2, r4
 8000964:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000968:	4841      	ldr	r0, [pc, #260]	; (8000a70 <main+0x1cc>)
 800096a:	f000 fd4d 	bl	8001408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800096e:	4622      	mov	r2, r4
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	483f      	ldr	r0, [pc, #252]	; (8000a74 <main+0x1d0>)
 8000976:	f000 fd47 	bl	8001408 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Button_Pin;
 800097a:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097c:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <main+0x1d4>)
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800097e:	483f      	ldr	r0, [pc, #252]	; (8000a7c <main+0x1d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000980:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000982:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = Button_Pin;
 8000984:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000988:	f000 fc68 	bl	800125c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin;
 800098c:	2320      	movs	r3, #32
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800098e:	a90b      	add	r1, sp, #44	; 0x2c
 8000990:	4836      	ldr	r0, [pc, #216]	; (8000a6c <main+0x1c8>)
  GPIO_InitStruct.Pin = CS_Pin;
 8000992:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800099a:	f000 fc5f 	bl	800125c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CLK_SEL_Pin|START_Pin|RESET_Pin;
 800099e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	a90b      	add	r1, sp, #44	; 0x2c
 80009a4:	4832      	ldr	r0, [pc, #200]	; (8000a70 <main+0x1cc>)
  GPIO_InitStruct.Pin = CLK_SEL_Pin|START_Pin|RESET_Pin;
 80009a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f000 fc55 	bl	800125c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <main+0x1dc>)
 80009b4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = DRDY_Pin;
 80009b6:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ba:	2302      	movs	r3, #2
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 80009bc:	a90b      	add	r1, sp, #44	; 0x2c
 80009be:	482c      	ldr	r0, [pc, #176]	; (8000a70 <main+0x1cc>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = DRDY_Pin;
 80009c2:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f000 fc4a 	bl	800125c <HAL_GPIO_Init>
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80009c8:	a90b      	add	r1, sp, #44	; 0x2c
 80009ca:	482a      	ldr	r0, [pc, #168]	; (8000a74 <main+0x1d0>)
  GPIO_InitStruct.Pin = LED1_Pin;
 80009cc:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f000 fc42 	bl	800125c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009d8:	4622      	mov	r2, r4
 80009da:	4621      	mov	r1, r4
 80009dc:	2006      	movs	r0, #6
 80009de:	f000 fbe5 	bl	80011ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009e2:	2006      	movs	r0, #6
 80009e4:	f000 fc16 	bl	8001214 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e8:	4621      	mov	r1, r4
 80009ea:	4622      	mov	r2, r4
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f000 fbdd 	bl	80011ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f2:	2028      	movs	r0, #40	; 0x28
 80009f4:	f000 fc0e 	bl	8001214 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <main+0x1e0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <main+0x1e4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fc:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a02:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0a:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a0c:	2318      	movs	r3, #24
 8000a0e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8000a10:	230a      	movs	r3, #10
 8000a12:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a16:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a18:	6145      	str	r5, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1a:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1e:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a20:	f001 fc88 	bl	8002334 <HAL_SPI_Init>
  MX_USB_DEVICE_Init();
 8000a24:	f000 f8f6 	bl	8000c14 <MX_USB_DEVICE_Init>
  CDC_Transmit_FS(mybuff,strlen((char *)mybuff));
 8000a28:	4630      	mov	r0, r6
 8000a2a:	f7ff fbd9 	bl	80001e0 <strlen>
 8000a2e:	b281      	uxth	r1, r0
 8000a30:	4630      	mov	r0, r6
 8000a32:	f000 f93d 	bl	8000cb0 <CDC_Transmit_FS>
  MessageCounter = READ_ID();
 8000a36:	f7ff fe8b 	bl	8000750 <READ_ID>
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <main+0x1e8>)
  MessageLength = sprintf(DataToSend, "Device ID = 0x%02X\n\r", MessageCounter);
 8000a3c:	4914      	ldr	r1, [pc, #80]	; (8000a90 <main+0x1ec>)
  MessageCounter = READ_ID();
 8000a3e:	7018      	strb	r0, [r3, #0]
  MessageLength = sprintf(DataToSend, "Device ID = 0x%02X\n\r", MessageCounter);
 8000a40:	b2c2      	uxtb	r2, r0
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <main+0x1f0>)
 8000a44:	f003 f8ac 	bl	8003ba0 <siprintf>
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <main+0x1f4>)
 8000a4a:	b2c1      	uxtb	r1, r0
  CDC_Transmit_FS(DataToSend, MessageLength);
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <main+0x1f0>)
  MessageLength = sprintf(DataToSend, "Device ID = 0x%02X\n\r", MessageCounter);
 8000a4e:	7019      	strb	r1, [r3, #0]
  CDC_Transmit_FS(DataToSend, MessageLength);
 8000a50:	f000 f92e 	bl	8000cb0 <CDC_Transmit_FS>
  HAL_Delay(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a58:	f000 fb82 	bl	8001160 <HAL_Delay>
  ADS1298_Init();
 8000a5c:	f7ff fea8 	bl	80007b0 <ADS1298_Init>
 8000a60:	e7fe      	b.n	8000a60 <main+0x1bc>
 8000a62:	bf00      	nop
 8000a64:	08004278 	.word	0x08004278
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	10210000 	.word	0x10210000
 8000a84:	2000031c 	.word	0x2000031c
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	20000200 	.word	0x20000200
 8000a90:	080042b6 	.word	0x080042b6
 8000a94:	2000020c 	.word	0x2000020c
 8000a98:	20000201 	.word	0x20000201

08000a9c <ADS_updateChannelData>:
void ADS_updateChannelData(){
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
		channelData[i] = 0;
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <ADS_updateChannelData+0x80>)
	for(i = 0; i < 9; i++){
 8000aa0:	2300      	movs	r3, #0
void ADS_updateChannelData(){
 8000aa2:	b087      	sub	sp, #28
		channelData[i] = 0;
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4614      	mov	r4, r2
 8000aa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < 9; i++){
 8000aac:	3301      	adds	r3, #1
 8000aae:	2b09      	cmp	r3, #9
 8000ab0:	d1fa      	bne.n	8000aa8 <ADS_updateChannelData+0xc>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	481a      	ldr	r0, [pc, #104]	; (8000b20 <ADS_updateChannelData+0x84>)
 8000ab8:	f000 fca6 	bl	8001408 <HAL_GPIO_WritePin>
	for(i = 0; i < 9; i++){
 8000abc:	2500      	movs	r5, #0
	for(i = 0; i < 9; i++){
 8000abe:	2603      	movs	r6, #3
			channelData[i] = (channelData[i]<<8) | inByte;
 8000ac0:	eb04 0785 	add.w	r7, r4, r5, lsl #2
			inByte = transferSPI(0x00);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fdfb 	bl	80006c0 <transferSPI>
			channelData[i] = (channelData[i]<<8) | inByte;
 8000aca:	683b      	ldr	r3, [r7, #0]
		for( j=0; j<3; j++){		//  read 24 bits of channel data from 1st ADS in 8 3 byte chunks
 8000acc:	3e01      	subs	r6, #1
			channelData[i] = (channelData[i]<<8) | inByte;
 8000ace:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000ad2:	6038      	str	r0, [r7, #0]
		for( j=0; j<3; j++){		//  read 24 bits of channel data from 1st ADS in 8 3 byte chunks
 8000ad4:	d1f6      	bne.n	8000ac4 <ADS_updateChannelData+0x28>
	for(i = 0; i < 9; i++){
 8000ad6:	3501      	adds	r5, #1
 8000ad8:	2d09      	cmp	r5, #9
 8000ada:	d1f0      	bne.n	8000abe <ADS_updateChannelData+0x22>
	MessageLength = sprintf(DataToSend, "%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X\n\r", channelData[1],channelData[2],channelData[3],channelData[4],channelData[5],channelData[6],channelData[7],channelData[8]);
 8000adc:	6a23      	ldr	r3, [r4, #32]
 8000ade:	9305      	str	r3, [sp, #20]
 8000ae0:	69e3      	ldr	r3, [r4, #28]
 8000ae2:	9304      	str	r3, [sp, #16]
 8000ae4:	69a3      	ldr	r3, [r4, #24]
 8000ae6:	9303      	str	r3, [sp, #12]
 8000ae8:	6963      	ldr	r3, [r4, #20]
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	6923      	ldr	r3, [r4, #16]
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	68e3      	ldr	r3, [r4, #12]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	6862      	ldr	r2, [r4, #4]
 8000af6:	68a3      	ldr	r3, [r4, #8]
 8000af8:	490a      	ldr	r1, [pc, #40]	; (8000b24 <ADS_updateChannelData+0x88>)
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <ADS_updateChannelData+0x8c>)
 8000afc:	f003 f850 	bl	8003ba0 <siprintf>
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <ADS_updateChannelData+0x90>)
 8000b02:	b2c1      	uxtb	r1, r0
	CDC_Transmit_FS(DataToSend, MessageLength);
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <ADS_updateChannelData+0x8c>)
	MessageLength = sprintf(DataToSend, "%02X,%02X,%02X,%02X,%02X,%02X,%02X,%02X\n\r", channelData[1],channelData[2],channelData[3],channelData[4],channelData[5],channelData[6],channelData[7],channelData[8]);
 8000b06:	7019      	strb	r1, [r3, #0]
	CDC_Transmit_FS(DataToSend, MessageLength);
 8000b08:	f000 f8d2 	bl	8000cb0 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <ADS_updateChannelData+0x84>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2120      	movs	r1, #32
}
 8000b12:	b007      	add	sp, #28
 8000b14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000b18:	f000 bc76 	b.w	8001408 <HAL_GPIO_WritePin>
 8000b1c:	20000234 	.word	0x20000234
 8000b20:	40020800 	.word	0x40020800
 8000b24:	0800428c 	.word	0x0800428c
 8000b28:	2000020c 	.word	0x2000020c
 8000b2c:	20000201 	.word	0x20000201

08000b30 <HAL_GPIO_EXTI_Callback>:


/* ----------------- Interrupt ----------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

	if(GPIO_Pin == DRDY_Pin){
 8000b30:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000b34:	d101      	bne.n	8000b3a <HAL_GPIO_EXTI_Callback+0xa>
		ADS_updateChannelData();
 8000b36:	f7ff bfb1 	b.w	8000a9c <ADS_updateChannelData>
 8000b3a:	4770      	bx	lr

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	4770      	bx	lr
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x34>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	9100      	str	r1, [sp, #0]
 8000b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8000b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b56:	9200      	str	r2, [sp, #0]
 8000b58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	9101      	str	r1, [sp, #4]
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	b002      	add	sp, #8
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	2214      	movs	r2, #20
 8000b80:	2100      	movs	r1, #0
 8000b82:	a803      	add	r0, sp, #12
 8000b84:	f002 ff48 	bl	8003a18 <memset>
  if(hspi->Instance==SPI1)
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_SPI_MspInit+0x64>)
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d122      	bne.n	8000bd6 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b90:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000b94:	2100      	movs	r1, #0
 8000b96:	9101      	str	r1, [sp, #4]
 8000b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ba4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000ba8:	9201      	str	r2, [sp, #4]
 8000baa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	9102      	str	r1, [sp, #8]
 8000bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb0:	f042 0201 	orr.w	r2, r2, #1
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	9302      	str	r3, [sp, #8]
 8000bbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bc0:	23e0      	movs	r3, #224	; 0xe0
 8000bc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f000 fb43 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bd6:	b008      	add	sp, #32
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013000 	.word	0x40013000
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000be4:	f001 bb2c 	b.w	8002240 <HAL_RCC_NMI_IRQHandler>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	e7fe      	b.n	8000be8 <HardFault_Handler>

08000bea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bea:	e7fe      	b.n	8000bea <MemManage_Handler>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	e7fe      	b.n	8000bec <BusFault_Handler>

08000bee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bee:	e7fe      	b.n	8000bee <UsageFault_Handler>

08000bf0 <SVC_Handler>:
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:
 8000bf2:	4770      	bx	lr

08000bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 baa1 	b.w	800113c <HAL_IncTick>

08000bfa <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 bc0a 	b.w	8001414 <HAL_GPIO_EXTI_IRQHandler>

08000c00 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c04:	f000 bc06 	b.w	8001414 <HAL_GPIO_EXTI_IRQHandler>

08000c08 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c08:	4801      	ldr	r0, [pc, #4]	; (8000c10 <OTG_FS_IRQHandler+0x8>)
 8000c0a:	f000 bcb5 	b.w	8001578 <HAL_PCD_IRQHandler>
 8000c0e:	bf00      	nop
 8000c10:	20001610 	.word	0x20001610

08000c14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000c16:	2200      	movs	r2, #0
 8000c18:	490e      	ldr	r1, [pc, #56]	; (8000c54 <MX_USB_DEVICE_Init+0x40>)
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <MX_USB_DEVICE_Init+0x44>)
 8000c1c:	f002 fb27 	bl	800326e <USBD_Init>
 8000c20:	b108      	cbz	r0, 8000c26 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8000c22:	f7ff ff8b 	bl	8000b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <MX_USB_DEVICE_Init+0x48>)
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <MX_USB_DEVICE_Init+0x44>)
 8000c2a:	f002 fb35 	bl	8003298 <USBD_RegisterClass>
 8000c2e:	b108      	cbz	r0, 8000c34 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8000c30:	f7ff ff84 	bl	8000b3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000c34:	490a      	ldr	r1, [pc, #40]	; (8000c60 <MX_USB_DEVICE_Init+0x4c>)
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_USB_DEVICE_Init+0x44>)
 8000c38:	f002 fad8 	bl	80031ec <USBD_CDC_RegisterInterface>
 8000c3c:	b108      	cbz	r0, 8000c42 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8000c3e:	f7ff ff7d 	bl	8000b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USB_DEVICE_Init+0x44>)
 8000c44:	f002 fb2f 	bl	80032a6 <USBD_Start>
 8000c48:	b118      	cbz	r0, 8000c52 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000c4e:	f7ff bf75 	b.w	8000b3c <Error_Handler>
 8000c52:	bd08      	pop	{r3, pc}
 8000c54:	20000010 	.word	0x20000010
 8000c58:	20000374 	.word	0x20000374
 8000c5c:	2000006c 	.word	0x2000006c
 8000c60:	20000000 	.word	0x20000000

08000c64 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8000c64:	2000      	movs	r0, #0
 8000c66:	4770      	bx	lr

08000c68 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8000c68:	2000      	movs	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000c6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000c6e:	4c05      	ldr	r4, [pc, #20]	; (8000c84 <CDC_Receive_FS+0x18>)
 8000c70:	4601      	mov	r1, r0
 8000c72:	4620      	mov	r0, r4
 8000c74:	f002 fac9 	bl	800320a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f002 fae5 	bl	8003248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8000c7e:	2000      	movs	r0, #0
 8000c80:	bd10      	pop	{r4, pc}
 8000c82:	bf00      	nop
 8000c84:	20000374 	.word	0x20000374

08000c88 <CDC_Init_FS>:
{
 8000c88:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000c8a:	4c06      	ldr	r4, [pc, #24]	; (8000ca4 <CDC_Init_FS+0x1c>)
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <CDC_Init_FS+0x20>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4620      	mov	r0, r4
 8000c92:	f002 fab2 	bl	80031fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000c96:	4905      	ldr	r1, [pc, #20]	; (8000cac <CDC_Init_FS+0x24>)
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f002 fab6 	bl	800320a <USBD_CDC_SetRxBuffer>
}
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000374 	.word	0x20000374
 8000ca8:	20000e10 	.word	0x20000e10
 8000cac:	20000610 	.word	0x20000610

08000cb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000cb0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000cb2:	4c09      	ldr	r4, [pc, #36]	; (8000cd8 <CDC_Transmit_FS+0x28>)
 8000cb4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8000cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8000cbc:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8000cbe:	b943      	cbnz	r3, 8000cd2 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f002 fa99 	bl	80031fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000cc8:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8000cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000cce:	f002 baa2 	b.w	8003216 <USBD_CDC_TransmitPacket>
}
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	bd10      	pop	{r4, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000374 	.word	0x20000374

08000cdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000cdc:	b530      	push	{r4, r5, lr}
 8000cde:	4604      	mov	r4, r0
 8000ce0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	2214      	movs	r2, #20
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	a803      	add	r0, sp, #12
 8000ce8:	f002 fe96 	bl	8003a18 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cf2:	d12e      	bne.n	8000d52 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4c18      	ldr	r4, [pc, #96]	; (8000d58 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	4819      	ldr	r0, [pc, #100]	; (8000d5c <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	2500      	movs	r5, #0
 8000cfa:	9501      	str	r5, [sp, #4]
 8000cfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6323      	str	r3, [r4, #48]	; 0x30
 8000d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d1e:	230a      	movs	r3, #10
 8000d20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f000 fa9b 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8000d2e:	9502      	str	r5, [sp, #8]
 8000d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6463      	str	r3, [r4, #68]	; 0x44
 8000d38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000d40:	2043      	movs	r0, #67	; 0x43
 8000d42:	462a      	mov	r2, r5
 8000d44:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d46:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000d48:	f000 fa30 	bl	80011ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000d4c:	2043      	movs	r0, #67	; 0x43
 8000d4e:	f000 fa61 	bl	8001214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d52:	b009      	add	sp, #36	; 0x24
 8000d54:	bd30      	pop	{r4, r5, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000d60:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8000d64:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000d68:	f002 bab4 	b.w	80032d4 <USBD_LL_SetupStage>

08000d6c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000d6c:	231c      	movs	r3, #28
 8000d6e:	fb03 0301 	mla	r3, r3, r1, r0
 8000d72:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000d76:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000d7a:	f002 bad8 	b.w	800332e <USBD_LL_DataOutStage>

08000d7e <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000d7e:	231c      	movs	r3, #28
 8000d80:	fb03 0301 	mla	r3, r3, r1, r0
 8000d84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d8a:	f002 bb0a 	b.w	80033a2 <USBD_LL_DataInStage>

08000d8e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000d8e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000d92:	f002 bb9b 	b.w	80034cc <USBD_LL_SOF>

08000d96 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000d96:	68c3      	ldr	r3, [r0, #12]
 8000d98:	2b02      	cmp	r3, #2
{ 
 8000d9a:	b510      	push	{r4, lr}
 8000d9c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000d9e:	d001      	beq.n	8000da4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000da0:	f7ff fecc 	bl	8000b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000da4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8000da8:	2101      	movs	r1, #1
 8000daa:	f002 fb7d 	bl	80034a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000dae:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8000db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000db6:	f002 bb50 	b.w	800345a <USBD_LL_Reset>
	...

08000dbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000dc0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000dc4:	f002 fb73 	bl	80034ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000dd6:	6a23      	ldr	r3, [r4, #32]
 8000dd8:	b123      	cbz	r3, 8000de4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000dda:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_PCD_SuspendCallback+0x2c>)
 8000ddc:	6913      	ldr	r3, [r2, #16]
 8000dde:	f043 0306 	orr.w	r3, r3, #6
 8000de2:	6113      	str	r3, [r2, #16]
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000dec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000df0:	f002 bb66 	b.w	80034c0 <USBD_LL_Resume>

08000df4 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000df4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000df8:	f002 bb76 	b.w	80034e8 <USBD_LL_IsoOUTIncomplete>

08000dfc <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8000dfc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000e00:	f002 bb70 	b.w	80034e4 <USBD_LL_IsoINIncomplete>

08000e04 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8000e04:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000e08:	f002 bb70 	b.w	80034ec <USBD_LL_DevConnected>

08000e0c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8000e0c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8000e10:	f002 bb6e 	b.w	80034f0 <USBD_LL_DevDisconnected>

08000e14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000e14:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8000e16:	7802      	ldrb	r2, [r0, #0]
 8000e18:	bb32      	cbnz	r2, 8000e68 <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e1c:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8000e1e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8000e22:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e2a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e2e:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e30:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e32:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e36:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e42:	f000 faf3 	bl	800142c <HAL_PCD_Init>
 8000e46:	b108      	cbz	r0, 8000e4c <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 8000e48:	f7ff fe78 	bl	8000b3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <USBD_LL_Init+0x58>)
 8000e50:	f000 ff98 	bl	8001d84 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	2100      	movs	r1, #0
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <USBD_LL_Init+0x58>)
 8000e5a:	f000 ff72 	bl	8001d42 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	2101      	movs	r1, #1
 8000e62:	4802      	ldr	r0, [pc, #8]	; (8000e6c <USBD_LL_Init+0x58>)
 8000e64:	f000 ff6d 	bl	8001d42 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8000e68:	2000      	movs	r0, #0
 8000e6a:	bd08      	pop	{r3, pc}
 8000e6c:	20001610 	.word	0x20001610

08000e70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000e70:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8000e72:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000e76:	f000 fb60 	bl	800153a <HAL_PCD_Start>
 8000e7a:	2803      	cmp	r0, #3
 8000e7c:	bf9a      	itte	ls
 8000e7e:	4b02      	ldrls	r3, [pc, #8]	; (8000e88 <USBD_LL_Start+0x18>)
 8000e80:	5c18      	ldrbls	r0, [r3, r0]
 8000e82:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8000e84:	bd08      	pop	{r3, pc}
 8000e86:	bf00      	nop
 8000e88:	080042cb 	.word	0x080042cb

08000e8c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000e90:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000e94:	4613      	mov	r3, r2
 8000e96:	4622      	mov	r2, r4
 8000e98:	f000 fe3c 	bl	8001b14 <HAL_PCD_EP_Open>
 8000e9c:	2803      	cmp	r0, #3
 8000e9e:	bf9a      	itte	ls
 8000ea0:	4b01      	ldrls	r3, [pc, #4]	; (8000ea8 <USBD_LL_OpenEP+0x1c>)
 8000ea2:	5c18      	ldrbls	r0, [r3, r0]
 8000ea4:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8000ea6:	bd10      	pop	{r4, pc}
 8000ea8:	080042cb 	.word	0x080042cb

08000eac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000eac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000eae:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000eb2:	f000 fe64 	bl	8001b7e <HAL_PCD_EP_Close>
 8000eb6:	2803      	cmp	r0, #3
 8000eb8:	bf9a      	itte	ls
 8000eba:	4b02      	ldrls	r3, [pc, #8]	; (8000ec4 <USBD_LL_CloseEP+0x18>)
 8000ebc:	5c18      	ldrbls	r0, [r3, r0]
 8000ebe:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8000ec0:	bd08      	pop	{r3, pc}
 8000ec2:	bf00      	nop
 8000ec4:	080042cb 	.word	0x080042cb

08000ec8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ec8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000eca:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000ece:	f000 fecc 	bl	8001c6a <HAL_PCD_EP_SetStall>
 8000ed2:	2803      	cmp	r0, #3
 8000ed4:	bf9a      	itte	ls
 8000ed6:	4b02      	ldrls	r3, [pc, #8]	; (8000ee0 <USBD_LL_StallEP+0x18>)
 8000ed8:	5c18      	ldrbls	r0, [r3, r0]
 8000eda:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000edc:	bd08      	pop	{r3, pc}
 8000ede:	bf00      	nop
 8000ee0:	080042cb 	.word	0x080042cb

08000ee4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000ee4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000ee6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000eea:	f000 fef8 	bl	8001cde <HAL_PCD_EP_ClrStall>
 8000eee:	2803      	cmp	r0, #3
 8000ef0:	bf9a      	itte	ls
 8000ef2:	4b02      	ldrls	r3, [pc, #8]	; (8000efc <USBD_LL_ClearStallEP+0x18>)
 8000ef4:	5c18      	ldrbls	r0, [r3, r0]
 8000ef6:	2002      	movhi	r0, #2
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8000ef8:	bd08      	pop	{r3, pc}
 8000efa:	bf00      	nop
 8000efc:	080042cb 	.word	0x080042cb

08000f00 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000f00:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000f04:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8000f08:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000f0c:	bf1b      	ittet	ne
 8000f0e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000f12:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000f16:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000f1a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000f1e:	bf08      	it	eq
 8000f20:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 8000f24:	4770      	bx	lr
	...

08000f28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000f28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000f2a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000f2e:	f000 fddd 	bl	8001aec <HAL_PCD_SetAddress>
 8000f32:	2803      	cmp	r0, #3
 8000f34:	bf9a      	itte	ls
 8000f36:	4b02      	ldrls	r3, [pc, #8]	; (8000f40 <USBD_LL_SetUSBAddress+0x18>)
 8000f38:	5c18      	ldrbls	r0, [r3, r0]
 8000f3a:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8000f3c:	bd08      	pop	{r3, pc}
 8000f3e:	bf00      	nop
 8000f40:	080042cb 	.word	0x080042cb

08000f44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000f44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000f46:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000f4a:	f000 fe6e 	bl	8001c2a <HAL_PCD_EP_Transmit>
 8000f4e:	2803      	cmp	r0, #3
 8000f50:	bf9a      	itte	ls
 8000f52:	4b02      	ldrls	r3, [pc, #8]	; (8000f5c <USBD_LL_Transmit+0x18>)
 8000f54:	5c18      	ldrbls	r0, [r3, r0]
 8000f56:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8000f58:	bd08      	pop	{r3, pc}
 8000f5a:	bf00      	nop
 8000f5c:	080042cb 	.word	0x080042cb

08000f60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000f60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000f62:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000f66:	f000 fe34 	bl	8001bd2 <HAL_PCD_EP_Receive>
 8000f6a:	2803      	cmp	r0, #3
 8000f6c:	bf9a      	itte	ls
 8000f6e:	4b02      	ldrls	r3, [pc, #8]	; (8000f78 <USBD_LL_PrepareReceive+0x18>)
 8000f70:	5c18      	ldrbls	r0, [r3, r0]
 8000f72:	2002      	movhi	r0, #2
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8000f74:	bd08      	pop	{r3, pc}
 8000f76:	bf00      	nop
 8000f78:	080042cb 	.word	0x080042cb

08000f7c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8000f7c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8000f80:	f000 be4b 	b.w	8001c1a <HAL_PCD_EP_GetRxCount>

08000f84 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000f84:	2312      	movs	r3, #18
 8000f86:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8000f88:	4800      	ldr	r0, [pc, #0]	; (8000f8c <USBD_FS_DeviceDescriptor+0x8>)
 8000f8a:	4770      	bx	lr
 8000f8c:	2000002c 	.word	0x2000002c

08000f90 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000f90:	2304      	movs	r3, #4
 8000f92:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8000f94:	4800      	ldr	r0, [pc, #0]	; (8000f98 <USBD_FS_LangIDStrDescriptor+0x8>)
 8000f96:	4770      	bx	lr
 8000f98:	20000040 	.word	0x20000040

08000f9c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8000f9c:	2300      	movs	r3, #0
{
 8000f9e:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8000fa0:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 8000fa2:	b2dc      	uxtb	r4, r3
 8000fa4:	42a2      	cmp	r2, r4
 8000fa6:	d800      	bhi.n	8000faa <IntToUnicode+0xe>
  }
}
 8000fa8:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8000faa:	0f04      	lsrs	r4, r0, #28
 8000fac:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8000fae:	bf94      	ite	ls
 8000fb0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000fb2:	3437      	addhi	r4, #55	; 0x37
 8000fb4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8000fb8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8000fbc:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8000fbe:	7065      	strb	r5, [r4, #1]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	e7ee      	b.n	8000fa2 <IntToUnicode+0x6>

08000fc4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8000fc4:	231a      	movs	r3, #26
{
 8000fc6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8000fc8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <USBD_FS_SerialStrDescriptor+0x2c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000fce:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8000fd0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8000fd2:	18c0      	adds	r0, r0, r3
 8000fd4:	d00a      	beq.n	8000fec <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000fda:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000fdc:	2208      	movs	r2, #8
 8000fde:	f7ff ffdd 	bl	8000f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4905      	ldr	r1, [pc, #20]	; (8000ffc <USBD_FS_SerialStrDescriptor+0x38>)
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ffd8 	bl	8000f9c <IntToUnicode>
}
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <USBD_FS_SerialStrDescriptor+0x3c>)
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	1fff7a10 	.word	0x1fff7a10
 8000ff4:	1fff7a14 	.word	0x1fff7a14
 8000ff8:	20000046 	.word	0x20000046
 8000ffc:	20000056 	.word	0x20000056
 8001000:	20000044 	.word	0x20000044

08001004 <USBD_FS_ManufacturerStrDescriptor>:
{
 8001004:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001006:	4c04      	ldr	r4, [pc, #16]	; (8001018 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800100a:	460a      	mov	r2, r1
 800100c:	4621      	mov	r1, r4
 800100e:	f002 fc6b 	bl	80038e8 <USBD_GetString>
}
 8001012:	4620      	mov	r0, r4
 8001014:	bd10      	pop	{r4, pc}
 8001016:	bf00      	nop
 8001018:	20001a18 	.word	0x20001a18
 800101c:	080042e8 	.word	0x080042e8

08001020 <USBD_FS_ProductStrDescriptor>:
{
 8001020:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001022:	4c04      	ldr	r4, [pc, #16]	; (8001034 <USBD_FS_ProductStrDescriptor+0x14>)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <USBD_FS_ProductStrDescriptor+0x18>)
 8001026:	460a      	mov	r2, r1
 8001028:	4621      	mov	r1, r4
 800102a:	f002 fc5d 	bl	80038e8 <USBD_GetString>
}
 800102e:	4620      	mov	r0, r4
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	20001a18 	.word	0x20001a18
 8001038:	080042fb 	.word	0x080042fb

0800103c <USBD_FS_ConfigStrDescriptor>:
{
 800103c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800103e:	4c04      	ldr	r4, [pc, #16]	; (8001050 <USBD_FS_ConfigStrDescriptor+0x14>)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <USBD_FS_ConfigStrDescriptor+0x18>)
 8001042:	460a      	mov	r2, r1
 8001044:	4621      	mov	r1, r4
 8001046:	f002 fc4f 	bl	80038e8 <USBD_GetString>
}
 800104a:	4620      	mov	r0, r4
 800104c:	bd10      	pop	{r4, pc}
 800104e:	bf00      	nop
 8001050:	20001a18 	.word	0x20001a18
 8001054:	080042cf 	.word	0x080042cf

08001058 <USBD_FS_InterfaceStrDescriptor>:
{
 8001058:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800105a:	4c04      	ldr	r4, [pc, #16]	; (800106c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800105e:	460a      	mov	r2, r1
 8001060:	4621      	mov	r1, r4
 8001062:	f002 fc41 	bl	80038e8 <USBD_GetString>
}
 8001066:	4620      	mov	r0, r4
 8001068:	bd10      	pop	{r4, pc}
 800106a:	bf00      	nop
 800106c:	20001a18 	.word	0x20001a18
 8001070:	080042da 	.word	0x080042da

08001074 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	490f      	ldr	r1, [pc, #60]	; (80010b4 <SystemInit+0x40>)
 8001076:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800107a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <SystemInit+0x44>)
 8001084:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001086:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800108e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001096:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800109a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <SystemInit+0x48>)
 800109e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010ae:	608b      	str	r3, [r1, #8]
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	40023800 	.word	0x40023800
 80010bc:	24003010 	.word	0x24003010

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_InitTick+0x3c>)
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_InitTick+0x40>)
{
 80010c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80010d2:	6810      	ldr	r0, [r2, #0]
 80010d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d8:	f000 f8aa 	bl	8001230 <HAL_SYSTICK_Config>
 80010dc:	4604      	mov	r4, r0
 80010de:	b958      	cbnz	r0, 80010f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e0:	2d0f      	cmp	r5, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	4602      	mov	r2, r0
 80010e6:	4629      	mov	r1, r5
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f85e 	bl	80011ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_InitTick+0x44>)
 80010f2:	4620      	mov	r0, r4
 80010f4:	601d      	str	r5, [r3, #0]
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	20000060 	.word	0x20000060
 8001100:	20000064 	.word	0x20000064
 8001104:	20000068 	.word	0x20000068

08001108 <HAL_Init>:
{
 8001108:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x30>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001112:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001122:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f82f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ffc8 	bl	80010c0 <HAL_InitTick>
  HAL_MspInit();
 8001130:	f7ff fd06 	bl	8000b40 <HAL_MspInit>
}
 8001134:	2000      	movs	r0, #0
 8001136:	bd08      	pop	{r3, pc}
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800113c:	4a03      	ldr	r2, [pc, #12]	; (800114c <HAL_IncTick+0x10>)
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_IncTick+0x14>)
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	440b      	add	r3, r1
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20001c18 	.word	0x20001c18
 8001150:	20000064 	.word	0x20000064

08001154 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001154:	4b01      	ldr	r3, [pc, #4]	; (800115c <HAL_GetTick+0x8>)
 8001156:	6818      	ldr	r0, [r3, #0]
}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20001c18 	.word	0x20001c18

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fff6 	bl	8001154 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001168:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	bf1c      	itt	ne
 800116c:	4b05      	ldrne	r3, [pc, #20]	; (8001184 <HAL_Delay+0x24>)
 800116e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001170:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001172:	bf18      	it	ne
 8001174:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	f7ff ffed 	bl	8001154 <HAL_GetTick>
 800117a:	1b40      	subs	r0, r0, r5
 800117c:	4284      	cmp	r4, r0
 800117e:	d8fa      	bhi.n	8001176 <HAL_Delay+0x16>
  {
  }
}
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	20000064 	.word	0x20000064

08001188 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800118a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	0200      	lsls	r0, r0, #8
 800119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80011a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011a4:	60d3      	str	r3, [r2, #12]
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b530      	push	{r4, r5, lr}
 80011b0:	68dc      	ldr	r4, [r3, #12]
 80011b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	2b04      	cmp	r3, #4
 80011be:	bf28      	it	cs
 80011c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 0501 	mov.w	r5, #1
 80011c8:	fa05 f303 	lsl.w	r3, r5, r3
 80011cc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d0:	bf8c      	ite	hi
 80011d2:	3c03      	subhi	r4, #3
 80011d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d6:	4019      	ands	r1, r3
 80011d8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011da:	fa05 f404 	lsl.w	r4, r5, r4
 80011de:	3c01      	subs	r4, #1
 80011e0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80011e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	ea42 0201 	orr.w	r2, r2, r1
 80011e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	bfad      	iteet	ge
 80011ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	f000 000f 	andlt.w	r0, r0, #15
 80011f6:	4b06      	ldrlt	r3, [pc, #24]	; (8001210 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	bfb5      	itete	lt
 80011fe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001208:	bd30      	pop	{r4, r5, pc}
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	e000ed14 	.word	0xe000ed14

08001214 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001214:	2800      	cmp	r0, #0
 8001216:	db08      	blt.n	800122a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001218:	0942      	lsrs	r2, r0, #5
 800121a:	2301      	movs	r3, #1
 800121c:	f000 001f 	and.w	r0, r0, #31
 8001220:	fa03 f000 	lsl.w	r0, r3, r0
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_NVIC_EnableIRQ+0x18>)
 8001226:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	3801      	subs	r0, #1
 8001232:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001236:	d20a      	bcs.n	800124e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	21f0      	movs	r1, #240	; 0xf0
 8001240:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001260:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001404 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4a64      	ldr	r2, [pc, #400]	; (80013fc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800126c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001270:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001274:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001278:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800127c:	42b7      	cmp	r7, r6
 800127e:	f040 80ad 	bne.w	80013dc <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	684c      	ldr	r4, [r1, #4]
 8001284:	f024 0a10 	bic.w	sl, r4, #16
 8001288:	f1ba 0f02 	cmp.w	sl, #2
 800128c:	d116      	bne.n	80012bc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800128e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001292:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800129a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012a2:	f04f 0e0f 	mov.w	lr, #15
 80012a6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80012aa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ae:	690d      	ldr	r5, [r1, #16]
 80012b0:	fa05 f50b 	lsl.w	r5, r5, fp
 80012b4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	f8cc 5020 	str.w	r5, [ip, #32]
 80012bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	fa05 f50c 	lsl.w	r5, r5, ip
 80012ca:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d8:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80012e6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ea:	d815      	bhi.n	8001318 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80012ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f4:	68cd      	ldr	r5, [r1, #12]
 80012f6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80012fa:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80012fe:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001302:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001306:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800130a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800130e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001312:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001316:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001318:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	9d00      	ldr	r5, [sp, #0]
 800131c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131e:	688f      	ldr	r7, [r1, #8]
 8001320:	fa07 f70c 	lsl.w	r7, r7, ip
 8001324:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001326:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001328:	00e5      	lsls	r5, r4, #3
 800132a:	d557      	bpl.n	80013dc <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	f04f 0b00 	mov.w	fp, #0
 8001330:	f8cd b00c 	str.w	fp, [sp, #12]
 8001334:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001338:	4d31      	ldr	r5, [pc, #196]	; (8001400 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800133e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001342:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001346:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800134a:	9703      	str	r7, [sp, #12]
 800134c:	9f03      	ldr	r7, [sp, #12]
 800134e:	f023 0703 	bic.w	r7, r3, #3
 8001352:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001356:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800135e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001362:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001366:	f04f 0e0f 	mov.w	lr, #15
 800136a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001374:	d039      	beq.n	80013ea <HAL_GPIO_Init+0x18e>
 8001376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800137a:	42a8      	cmp	r0, r5
 800137c:	d037      	beq.n	80013ee <HAL_GPIO_Init+0x192>
 800137e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001382:	42a8      	cmp	r0, r5
 8001384:	d035      	beq.n	80013f2 <HAL_GPIO_Init+0x196>
 8001386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800138a:	42a8      	cmp	r0, r5
 800138c:	d033      	beq.n	80013f6 <HAL_GPIO_Init+0x19a>
 800138e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001392:	42a8      	cmp	r0, r5
 8001394:	bf14      	ite	ne
 8001396:	2507      	movne	r5, #7
 8001398:	2504      	moveq	r5, #4
 800139a:	fa05 f50c 	lsl.w	r5, r5, ip
 800139e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013a4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013ac:	bf0c      	ite	eq
 80013ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013b0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80013b2:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80013b4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013ba:	bf0c      	ite	eq
 80013bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013be:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80013c0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80013c8:	bf0c      	ite	eq
 80013ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013cc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80013ce:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80013d4:	bf54      	ite	pl
 80013d6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80013d8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80013da:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013dc:	3301      	adds	r3, #1
 80013de:	2b10      	cmp	r3, #16
 80013e0:	f47f af47 	bne.w	8001272 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80013e4:	b005      	add	sp, #20
 80013e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ea:	465d      	mov	r5, fp
 80013ec:	e7d5      	b.n	800139a <HAL_GPIO_Init+0x13e>
 80013ee:	2501      	movs	r5, #1
 80013f0:	e7d3      	b.n	800139a <HAL_GPIO_Init+0x13e>
 80013f2:	2502      	movs	r5, #2
 80013f4:	e7d1      	b.n	800139a <HAL_GPIO_Init+0x13e>
 80013f6:	2503      	movs	r5, #3
 80013f8:	e7cf      	b.n	800139a <HAL_GPIO_Init+0x13e>
 80013fa:	bf00      	nop
 80013fc:	40013c00 	.word	0x40013c00
 8001400:	40020000 	.word	0x40020000
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	b10a      	cbz	r2, 800140e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	6181      	str	r1, [r0, #24]
 800140c:	4770      	bx	lr
 800140e:	0409      	lsls	r1, r1, #16
 8001410:	e7fb      	b.n	800140a <HAL_GPIO_WritePin+0x2>
	...

08001414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001414:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001418:	6959      	ldr	r1, [r3, #20]
 800141a:	4201      	tst	r1, r0
 800141c:	d002      	beq.n	8001424 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	f7ff fb86 	bl	8000b30 <HAL_GPIO_EXTI_Callback>
 8001424:	bd08      	pop	{r3, pc}
 8001426:	bf00      	nop
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800142e:	4604      	mov	r4, r0
{
 8001430:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001432:	b360      	cbz	r0, 800148e <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001434:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8001438:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800143a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800143e:	b91b      	cbnz	r3, 8001448 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001440:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001444:	f7ff fc4a 	bl	8000cdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001448:	2303      	movs	r3, #3
 800144a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800144e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001450:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001452:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001456:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800145a:	bf08      	it	eq
 800145c:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800145e:	f001 f969 	bl	8002734 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001464:	466e      	mov	r6, sp
 8001466:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800146c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001470:	e886 0003 	stmia.w	r6, {r0, r1}
 8001474:	4625      	mov	r5, r4
 8001476:	1d27      	adds	r7, r4, #4
 8001478:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800147c:	f855 0b10 	ldr.w	r0, [r5], #16
 8001480:	f001 f89e 	bl	80025c0 <USB_CoreInit>
 8001484:	4606      	mov	r6, r0
 8001486:	b120      	cbz	r0, 8001492 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001488:	2302      	movs	r3, #2
 800148a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800148e:	2501      	movs	r5, #1
 8001490:	e050      	b.n	8001534 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001492:	4601      	mov	r1, r0
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	f001 f953 	bl	8002740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149a:	4630      	mov	r0, r6
 800149c:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a0:	261c      	movs	r6, #28
 80014a2:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014a6:	4601      	mov	r1, r0
 80014a8:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	4596      	cmp	lr, r2
 80014ac:	f100 0001 	add.w	r0, r0, #1
 80014b0:	d81c      	bhi.n	80014ec <HAL_PCD_Init+0xc0>
 80014b2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014b4:	261c      	movs	r6, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ba:	4586      	cmp	lr, r0
 80014bc:	f103 0301 	add.w	r3, r3, #1
 80014c0:	d822      	bhi.n	8001508 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c4:	466e      	mov	r6, sp
 80014c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014d0:	e886 0003 	stmia.w	r6, {r0, r1}
 80014d4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80014d8:	6820      	ldr	r0, [r4, #0]
 80014da:	f001 f973 	bl	80027c4 <USB_DevInit>
 80014de:	2301      	movs	r3, #1
 80014e0:	4605      	mov	r5, r0
 80014e2:	b300      	cbz	r0, 8001526 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e4:	2202      	movs	r2, #2
 80014e6:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80014ea:	e7d0      	b.n	800148e <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 80014ec:	fb06 4302 	mla	r3, r6, r2, r4
 80014f0:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014fc:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001500:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001502:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001504:	6519      	str	r1, [r3, #80]	; 0x50
 8001506:	e7cf      	b.n	80014a8 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001508:	fb06 4200 	mla	r2, r6, r0, r4
 800150c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001510:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001514:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001518:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800151c:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001520:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8001524:	e7c8      	b.n	80014b8 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001526:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800152a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800152e:	6820      	ldr	r0, [r4, #0]
 8001530:	f001 fc9a 	bl	8002e68 <USB_DevDisconnect>

  return HAL_OK;
}
 8001534:	4628      	mov	r0, r5
 8001536:	b00b      	add	sp, #44	; 0x2c
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800153a <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800153a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800153e:	2b01      	cmp	r3, #1
{
 8001540:	b510      	push	{r4, lr}
 8001542:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001544:	d016      	beq.n	8001574 <HAL_PCD_Start+0x3a>
 8001546:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001548:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800154a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800154e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_PCD_Start+0x28>
 8001554:	69a3      	ldr	r3, [r4, #24]
 8001556:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001558:	bf1e      	ittt	ne
 800155a:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 800155c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8001560:	6383      	strne	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001562:	f001 fc75 	bl	8002e50 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	f001 f8de 	bl	8002728 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800156c:	2000      	movs	r0, #0
 800156e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001572:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001574:	2002      	movs	r0, #2
}
 8001576:	bd10      	pop	{r4, pc}

08001578 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800157c:	6806      	ldr	r6, [r0, #0]
{
 800157e:	b087      	sub	sp, #28
 8001580:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001582:	4630      	mov	r0, r6
 8001584:	f001 fcab 	bl	8002ede <USB_GetMode>
 8001588:	9002      	str	r0, [sp, #8]
 800158a:	2800      	cmp	r0, #0
 800158c:	f040 8122 	bne.w	80017d4 <HAL_PCD_IRQHandler+0x25c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	f001 fc75 	bl	8002e80 <USB_ReadInterrupts>
 8001596:	2800      	cmp	r0, #0
 8001598:	f000 811c 	beq.w	80017d4 <HAL_PCD_IRQHandler+0x25c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800159c:	6820      	ldr	r0, [r4, #0]
 800159e:	f001 fc6f 	bl	8002e80 <USB_ReadInterrupts>
 80015a2:	0783      	lsls	r3, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015a4:	bf48      	it	mi
 80015a6:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015a8:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015aa:	bf42      	ittt	mi
 80015ac:	6953      	ldrmi	r3, [r2, #20]
 80015ae:	f003 0302 	andmi.w	r3, r3, #2
 80015b2:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015b4:	f001 fc64 	bl	8002e80 <USB_ReadInterrupts>
 80015b8:	0307      	lsls	r7, r0, #12
 80015ba:	f100 810e 	bmi.w	80017da <HAL_PCD_IRQHandler+0x262>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015be:	6820      	ldr	r0, [r4, #0]
 80015c0:	f001 fc5e 	bl	8002e80 <USB_ReadInterrupts>
 80015c4:	0345      	lsls	r5, r0, #13
 80015c6:	d50c      	bpl.n	80015e2 <HAL_PCD_IRQHandler+0x6a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015c8:	6820      	ldr	r0, [r4, #0]
 80015ca:	f001 fc65 	bl	8002e98 <USB_ReadDevAllInEpInterrupt>
 80015ce:	4625      	mov	r5, r4
 80015d0:	4683      	mov	fp, r0
 80015d2:	f506 6a10 	add.w	sl, r6, #2304	; 0x900

      epnum = 0U;
 80015d6:	f04f 0900 	mov.w	r9, #0

      while (ep_intr != 0U)
 80015da:	f1bb 0f00 	cmp.w	fp, #0
 80015de:	f040 81bc 	bne.w	800195a <HAL_PCD_IRQHandler+0x3e2>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	f001 fc4c 	bl	8002e80 <USB_ReadInterrupts>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	da15      	bge.n	8001618 <HAL_PCD_IRQHandler+0xa0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ec:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80015f8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8241 	bne.w	8001a84 <HAL_PCD_IRQHandler+0x50c>
      {
        hpcd->LPM_State = LPM_L0;
 8001602:	2100      	movs	r1, #0
 8001604:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001608:	4620      	mov	r0, r4
 800160a:	f000 fbbf 	bl	8001d8c <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	6953      	ldr	r3, [r2, #20]
 8001612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001616:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	f001 fc31 	bl	8002e80 <USB_ReadInterrupts>
 800161e:	0500      	lsls	r0, r0, #20
 8001620:	d50b      	bpl.n	800163a <HAL_PCD_IRQHandler+0xc2>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001622:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001626:	07d9      	lsls	r1, r3, #31
 8001628:	d502      	bpl.n	8001630 <HAL_PCD_IRQHandler+0xb8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff fbc6 	bl	8000dbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	6953      	ldr	r3, [r2, #20]
 8001634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001638:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800163a:	6820      	ldr	r0, [r4, #0]
 800163c:	f001 fc20 	bl	8002e80 <USB_ReadInterrupts>
 8001640:	04c2      	lsls	r2, r0, #19
 8001642:	d535      	bpl.n	80016b0 <HAL_PCD_IRQHandler+0x138>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001644:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8001648:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800164a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001652:	2110      	movs	r1, #16
 8001654:	f001 f88c 	bl	8002770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001658:	6860      	ldr	r0, [r4, #4]
 800165a:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800165e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	9a02      	ldr	r2, [sp, #8]
 8001664:	4282      	cmp	r2, r0
 8001666:	f040 8211 	bne.w	8001a8c <HAL_PCD_IRQHandler+0x514>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800166a:	69eb      	ldr	r3, [r5, #28]
 800166c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001670:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001672:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 821b 	beq.w	8001ab0 <HAL_PCD_IRQHandler+0x538>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800167a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800167e:	f043 030b 	orr.w	r3, r3, #11
 8001682:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001686:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001688:	f043 030b 	orr.w	r3, r3, #11
 800168c:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800168e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001692:	7c21      	ldrb	r1, [r4, #16]
 8001694:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001696:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800169a:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800169e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80016a2:	f001 fc3b 	bl	8002f1c <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6953      	ldr	r3, [r2, #20]
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	f001 fbe5 	bl	8002e80 <USB_ReadInterrupts>
 80016b6:	0483      	lsls	r3, r0, #18
 80016b8:	d516      	bpl.n	80016e8 <HAL_PCD_IRQHandler+0x170>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016ba:	6820      	ldr	r0, [r4, #0]
 80016bc:	f001 fc13 	bl	8002ee6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016c0:	6820      	ldr	r0, [r4, #0]
 80016c2:	f001 f943 	bl	800294c <USB_GetDevSpeed>
 80016c6:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016c8:	6825      	ldr	r5, [r4, #0]
 80016ca:	f000 fdb1 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 80016ce:	7b22      	ldrb	r2, [r4, #12]
 80016d0:	4601      	mov	r1, r0
 80016d2:	4628      	mov	r0, r5
 80016d4:	f000 ffb4 	bl	8002640 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fb5c 	bl	8000d96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016de:	6822      	ldr	r2, [r4, #0]
 80016e0:	6953      	ldr	r3, [r2, #20]
 80016e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e6:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016e8:	6820      	ldr	r0, [r4, #0]
 80016ea:	f001 fbc9 	bl	8002e80 <USB_ReadInterrupts>
 80016ee:	06c7      	lsls	r7, r0, #27
 80016f0:	d52a      	bpl.n	8001748 <HAL_PCD_IRQHandler+0x1d0>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f2:	6822      	ldr	r2, [r4, #0]
 80016f4:	6993      	ldr	r3, [r2, #24]
 80016f6:	f023 0310 	bic.w	r3, r3, #16
 80016fa:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80016fc:	6a35      	ldr	r5, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016fe:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8001702:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001704:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001708:	f040 81dd 	bne.w	8001ac6 <HAL_PCD_IRQHandler+0x54e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800170c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001710:	421d      	tst	r5, r3
 8001712:	d014      	beq.n	800173e <HAL_PCD_IRQHandler+0x1c6>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001714:	231c      	movs	r3, #28
 8001716:	fb03 4707 	mla	r7, r3, r7, r4
 800171a:	f3c5 150a 	ubfx	r5, r5, #4, #11
 800171e:	462a      	mov	r2, r5
 8001720:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8001724:	4630      	mov	r0, r6
 8001726:	f001 fb1d 	bl	8002d64 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800172a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800172e:	442b      	add	r3, r5
 8001730:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001734:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001738:	441d      	add	r5, r3
 800173a:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6993      	ldr	r3, [r2, #24]
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	f001 fb99 	bl	8002e80 <USB_ReadInterrupts>
 800174e:	0706      	lsls	r6, r0, #28
 8001750:	d507      	bpl.n	8001762 <HAL_PCD_IRQHandler+0x1ea>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fb1b 	bl	8000d8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001758:	6822      	ldr	r2, [r4, #0]
 800175a:	6953      	ldr	r3, [r2, #20]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001762:	6820      	ldr	r0, [r4, #0]
 8001764:	f001 fb8c 	bl	8002e80 <USB_ReadInterrupts>
 8001768:	02c5      	lsls	r5, r0, #11
 800176a:	d508      	bpl.n	800177e <HAL_PCD_IRQHandler+0x206>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800176c:	2100      	movs	r1, #0
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff fb44 	bl	8000dfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	6953      	ldr	r3, [r2, #20]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800177e:	6820      	ldr	r0, [r4, #0]
 8001780:	f001 fb7e 	bl	8002e80 <USB_ReadInterrupts>
 8001784:	0280      	lsls	r0, r0, #10
 8001786:	d508      	bpl.n	800179a <HAL_PCD_IRQHandler+0x222>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001788:	2100      	movs	r1, #0
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fb32 	bl	8000df4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001790:	6822      	ldr	r2, [r4, #0]
 8001792:	6953      	ldr	r3, [r2, #20]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	f001 fb70 	bl	8002e80 <USB_ReadInterrupts>
 80017a0:	0041      	lsls	r1, r0, #1
 80017a2:	d507      	bpl.n	80017b4 <HAL_PCD_IRQHandler+0x23c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff fb2d 	bl	8000e04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017aa:	6822      	ldr	r2, [r4, #0]
 80017ac:	6953      	ldr	r3, [r2, #20]
 80017ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017b2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017b4:	6820      	ldr	r0, [r4, #0]
 80017b6:	f001 fb63 	bl	8002e80 <USB_ReadInterrupts>
 80017ba:	0742      	lsls	r2, r0, #29
 80017bc:	d50a      	bpl.n	80017d4 <HAL_PCD_IRQHandler+0x25c>
    {
      temp = hpcd->Instance->GOTGINT;
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017c2:	076b      	lsls	r3, r5, #29
 80017c4:	d502      	bpl.n	80017cc <HAL_PCD_IRQHandler+0x254>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff fb20 	bl	8000e0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4315      	orrs	r5, r2
 80017d2:	605d      	str	r5, [r3, #4]
    }
  }
}
 80017d4:	b007      	add	sp, #28
 80017d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017da:	6820      	ldr	r0, [r4, #0]
 80017dc:	f8df b308 	ldr.w	fp, [pc, #776]	; 8001ae8 <HAL_PCD_IRQHandler+0x570>
 80017e0:	f001 fb52 	bl	8002e88 <USB_ReadDevAllOutEpInterrupt>
 80017e4:	f506 6530 	add.w	r5, r6, #2816	; 0xb00
 80017e8:	4682      	mov	sl, r0
 80017ea:	46a0      	mov	r8, r4
      epnum = 0U;
 80017ec:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 80017ee:	f1ba 0f00 	cmp.w	sl, #0
 80017f2:	f43f aee4 	beq.w	80015be <HAL_PCD_IRQHandler+0x46>
        if ((ep_intr & 0x1U) != 0U)
 80017f6:	f01a 0f01 	tst.w	sl, #1
 80017fa:	f000 80a7 	beq.w	800194c <HAL_PCD_IRQHandler+0x3d4>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017fe:	b2fa      	uxtb	r2, r7
 8001800:	4611      	mov	r1, r2
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	9203      	str	r2, [sp, #12]
 8001806:	f001 fb4f 	bl	8002ea8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800180a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800180e:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001810:	9a03      	ldr	r2, [sp, #12]
 8001812:	d04c      	beq.n	80018ae <HAL_PCD_IRQHandler+0x336>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001814:	2301      	movs	r3, #1
 8001816:	60ab      	str	r3, [r5, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001818:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800181a:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800181c:	f8d3 e040 	ldr.w	lr, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001824:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8001828:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800182a:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 800182c:	d154      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x360>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800182e:	0708      	lsls	r0, r1, #28
 8001830:	d514      	bpl.n	800185c <HAL_PCD_IRQHandler+0x2e4>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001832:	45de      	cmp	lr, fp
 8001834:	d904      	bls.n	8001840 <HAL_PCD_IRQHandler+0x2c8>
 8001836:	040a      	lsls	r2, r1, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001838:	bf44      	itt	mi
 800183a:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800183e:	609a      	strmi	r2, [r3, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001840:	4620      	mov	r0, r4
 8001842:	9303      	str	r3, [sp, #12]
 8001844:	f7ff fa8c 	bl	8000d60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001848:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800184c:	2101      	movs	r1, #1
 800184e:	6820      	ldr	r0, [r4, #0]
 8001850:	f001 fb64 	bl	8002f1c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001854:	9b03      	ldr	r3, [sp, #12]
 8001856:	2208      	movs	r2, #8
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e028      	b.n	80018ae <HAL_PCD_IRQHandler+0x336>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800185c:	0688      	lsls	r0, r1, #26
 800185e:	d501      	bpl.n	8001864 <HAL_PCD_IRQHandler+0x2ec>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001860:	2220      	movs	r2, #32
 8001862:	e7f9      	b.n	8001858 <HAL_PCD_IRQHandler+0x2e0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001864:	f011 0f28 	tst.w	r1, #40	; 0x28
 8001868:	d121      	bne.n	80018ae <HAL_PCD_IRQHandler+0x336>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800186a:	45de      	cmp	lr, fp
 800186c:	d904      	bls.n	8001878 <HAL_PCD_IRQHandler+0x300>
 800186e:	0409      	lsls	r1, r1, #16
 8001870:	d502      	bpl.n	8001878 <HAL_PCD_IRQHandler+0x300>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001872:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001876:	e7ef      	b.n	8001858 <HAL_PCD_IRQHandler+0x2e0>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001878:	691b      	ldr	r3, [r3, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800187a:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800187e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001882:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001884:	f8c8 3214 	str.w	r3, [r8, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001888:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 800188c:	4419      	add	r1, r3
 800188e:	f8c8 1208 	str.w	r1, [r8, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001892:	4620      	mov	r0, r4
 8001894:	4611      	mov	r1, r2
 8001896:	f7ff fa69 	bl	8000d6c <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800189a:	b947      	cbnz	r7, 80018ae <HAL_PCD_IRQHandler+0x336>
 800189c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80018a0:	b92b      	cbnz	r3, 80018ae <HAL_PCD_IRQHandler+0x336>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018a2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80018a6:	2101      	movs	r1, #1
 80018a8:	6820      	ldr	r0, [r4, #0]
 80018aa:	f001 fb37 	bl	8002f1c <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018ae:	f019 0f08 	tst.w	r9, #8
 80018b2:	d033      	beq.n	800191c <HAL_PCD_IRQHandler+0x3a4>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018b4:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80018b6:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80018b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80018ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018be:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80018c2:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80018c4:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80018c6:	d115      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x37c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80018c8:	455a      	cmp	r2, fp
 80018ca:	d916      	bls.n	80018fa <HAL_PCD_IRQHandler+0x382>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80018cc:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80018ce:	bf44      	itt	mi
 80018d0:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80018d4:	6099      	strmi	r1, [r3, #8]
 80018d6:	e010      	b.n	80018fa <HAL_PCD_IRQHandler+0x382>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80018d8:	4882      	ldr	r0, [pc, #520]	; (8001ae4 <HAL_PCD_IRQHandler+0x56c>)
 80018da:	4586      	cmp	lr, r0
 80018dc:	d105      	bne.n	80018ea <HAL_PCD_IRQHandler+0x372>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80018de:	0408      	lsls	r0, r1, #16
 80018e0:	d4c7      	bmi.n	8001872 <HAL_PCD_IRQHandler+0x2fa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018e2:	0688      	lsls	r0, r1, #26
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018e4:	bf44      	itt	mi
 80018e6:	2120      	movmi	r1, #32
 80018e8:	6099      	strmi	r1, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80018ea:	4611      	mov	r1, r2
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff fa3d 	bl	8000d6c <HAL_PCD_DataOutStageCallback>
 80018f2:	e7dc      	b.n	80018ae <HAL_PCD_IRQHandler+0x336>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80018f4:	487b      	ldr	r0, [pc, #492]	; (8001ae4 <HAL_PCD_IRQHandler+0x56c>)
 80018f6:	4282      	cmp	r2, r0
 80018f8:	d0e8      	beq.n	80018cc <HAL_PCD_IRQHandler+0x354>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80018fa:	4620      	mov	r0, r4
 80018fc:	9203      	str	r2, [sp, #12]
 80018fe:	f7ff fa2f 	bl	8000d60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001902:	9a03      	ldr	r2, [sp, #12]
 8001904:	455a      	cmp	r2, fp
 8001906:	d907      	bls.n	8001918 <HAL_PCD_IRQHandler+0x3a0>
 8001908:	6921      	ldr	r1, [r4, #16]
 800190a:	2901      	cmp	r1, #1
 800190c:	d104      	bne.n	8001918 <HAL_PCD_IRQHandler+0x3a0>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800190e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001912:	6820      	ldr	r0, [r4, #0]
 8001914:	f001 fb02 	bl	8002f1c <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001918:	2308      	movs	r3, #8
 800191a:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800191c:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001920:	bf1c      	itt	ne
 8001922:	2310      	movne	r3, #16
 8001924:	60ab      	strne	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001926:	f019 0f20 	tst.w	r9, #32
 800192a:	d009      	beq.n	8001940 <HAL_PCD_IRQHandler+0x3c8>
            if (hpcd->Init.dma_enable == 1U)
 800192c:	6921      	ldr	r1, [r4, #16]
 800192e:	2901      	cmp	r1, #1
 8001930:	d104      	bne.n	800193c <HAL_PCD_IRQHandler+0x3c4>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001932:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001936:	6820      	ldr	r0, [r4, #0]
 8001938:	f001 faf0 	bl	8002f1c <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800193c:	2320      	movs	r3, #32
 800193e:	60ab      	str	r3, [r5, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001940:	f419 5f00 	tst.w	r9, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001944:	bf1c      	itt	ne
 8001946:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 800194a:	60ab      	strne	r3, [r5, #8]
        epnum++;
 800194c:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 800194e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8001952:	3520      	adds	r5, #32
 8001954:	f108 081c 	add.w	r8, r8, #28
 8001958:	e749      	b.n	80017ee <HAL_PCD_IRQHandler+0x276>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800195a:	f01b 0f01 	tst.w	fp, #1
 800195e:	f000 8089 	beq.w	8001a74 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001962:	fa5f f389 	uxtb.w	r3, r9
 8001966:	4619      	mov	r1, r3
 8001968:	6820      	ldr	r0, [r4, #0]
 800196a:	9303      	str	r3, [sp, #12]
 800196c:	f001 faa5 	bl	8002eba <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001970:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001972:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001974:	d524      	bpl.n	80019c0 <HAL_PCD_IRQHandler+0x448>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001976:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800197a:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800197c:	2001      	movs	r0, #1
 800197e:	f009 020f 	and.w	r2, r9, #15
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001986:	ea23 0302 	bic.w	r3, r3, r2
 800198a:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 800198e:	6923      	ldr	r3, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001990:	f8ca 0008 	str.w	r0, [sl, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001994:	4283      	cmp	r3, r0
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001996:	bf01      	itttt	eq
 8001998:	6cab      	ldreq	r3, [r5, #72]	; 0x48
 800199a:	6c6a      	ldreq	r2, [r5, #68]	; 0x44
 800199c:	189b      	addeq	r3, r3, r2
 800199e:	64ab      	streq	r3, [r5, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff f9ec 	bl	8000d7e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80019a6:	6921      	ldr	r1, [r4, #16]
 80019a8:	2901      	cmp	r1, #1
 80019aa:	d109      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x448>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019ac:	f1b9 0f00 	cmp.w	r9, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x448>
 80019b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019b4:	b923      	cbnz	r3, 80019c0 <HAL_PCD_IRQHandler+0x448>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019b6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80019ba:	6820      	ldr	r0, [r4, #0]
 80019bc:	f001 faae 	bl	8002f1c <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019c0:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019c2:	bf44      	itt	mi
 80019c4:	2308      	movmi	r3, #8
 80019c6:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019ca:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019cc:	bf44      	itt	mi
 80019ce:	2310      	movmi	r3, #16
 80019d0:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019d4:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019d6:	bf44      	itt	mi
 80019d8:	2340      	movmi	r3, #64	; 0x40
 80019da:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019de:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019e0:	bf44      	itt	mi
 80019e2:	2302      	movmi	r3, #2
 80019e4:	f8ca 3008 	strmi.w	r3, [sl, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019e8:	063f      	lsls	r7, r7, #24
 80019ea:	d543      	bpl.n	8001a74 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 80019ec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80019ee:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80019f0:	42bb      	cmp	r3, r7
 80019f2:	d83f      	bhi.n	8001a74 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 80019f4:	1aff      	subs	r7, r7, r3
  len32b = (len + 3U) / 4U;
 80019f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	9204      	str	r2, [sp, #16]
  len32b = (len + 3U) / 4U;
 80019fc:	429f      	cmp	r7, r3
 80019fe:	bf28      	it	cs
 8001a00:	461f      	movcs	r7, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a02:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8001a06:	3703      	adds	r7, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a08:	eb03 1349 	add.w	r3, r3, r9, lsl #5
  len32b = (len + 3U) / 4U;
 8001a0c:	08bf      	lsrs	r7, r7, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a0e:	9305      	str	r3, [sp, #20]
 8001a10:	9b05      	ldr	r3, [sp, #20]
 8001a12:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	42bb      	cmp	r3, r7
 8001a1a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001a1c:	d328      	bcc.n	8001a70 <HAL_PCD_IRQHandler+0x4f8>
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d926      	bls.n	8001a70 <HAL_PCD_IRQHandler+0x4f8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001a22:	b963      	cbnz	r3, 8001a3e <HAL_PCD_IRQHandler+0x4c6>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a24:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a26:	f009 010f 	and.w	r1, r9, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a2a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a2e:	2001      	movs	r0, #1
 8001a30:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a34:	ea22 0201 	bic.w	r2, r2, r1
 8001a38:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8001a3c:	e01a      	b.n	8001a74 <HAL_PCD_IRQHandler+0x4fc>
    len = ep->xfer_len - ep->xfer_count;
 8001a3e:	eba3 0802 	sub.w	r8, r3, r2
 8001a42:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a44:	9a03      	ldr	r2, [sp, #12]
 8001a46:	9804      	ldr	r0, [sp, #16]
 8001a48:	4598      	cmp	r8, r3
 8001a4a:	bf28      	it	cs
 8001a4c:	4698      	movcs	r8, r3
 8001a4e:	7c23      	ldrb	r3, [r4, #16]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001a54:	fa1f f388 	uxth.w	r3, r8
 8001a58:	f001 f882 	bl	8002b60 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001a5c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001a5e:	4443      	add	r3, r8
 8001a60:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001a62:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 8001a64:	f108 0703 	add.w	r7, r8, #3
    ep->xfer_count += len;
 8001a68:	4443      	add	r3, r8
    len32b = (len + 3U) / 4U;
 8001a6a:	08bf      	lsrs	r7, r7, #2
    ep->xfer_count += len;
 8001a6c:	656b      	str	r3, [r5, #84]	; 0x54
 8001a6e:	e7cf      	b.n	8001a10 <HAL_PCD_IRQHandler+0x498>
  if (ep->xfer_len <= ep->xfer_count)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d9d7      	bls.n	8001a24 <HAL_PCD_IRQHandler+0x4ac>
        epnum++;
 8001a74:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001a78:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001a7c:	351c      	adds	r5, #28
 8001a7e:	f10a 0a20 	add.w	sl, sl, #32
 8001a82:	e5aa      	b.n	80015da <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_ResumeCallback(hpcd);
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff f9b1 	bl	8000dec <HAL_PCD_ResumeCallback>
 8001a8a:	e5c0      	b.n	800160e <HAL_PCD_IRQHandler+0x96>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a8c:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001a94:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a96:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a9e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001aa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa6:	9a02      	ldr	r2, [sp, #8]
 8001aa8:	3201      	adds	r2, #1
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	3320      	adds	r3, #32
 8001aae:	e5d8      	b.n	8001662 <HAL_PCD_IRQHandler+0xea>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ab0:	696b      	ldr	r3, [r5, #20]
 8001ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001aba:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001abc:	692b      	ldr	r3, [r5, #16]
 8001abe:	f043 030b 	orr.w	r3, r3, #11
 8001ac2:	612b      	str	r3, [r5, #16]
 8001ac4:	e5e3      	b.n	800168e <HAL_PCD_IRQHandler+0x116>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	f47f ae39 	bne.w	800173e <HAL_PCD_IRQHandler+0x1c6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001acc:	2208      	movs	r2, #8
 8001ace:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f001 f946 	bl	8002d64 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad8:	231c      	movs	r3, #28
 8001ada:	fb03 4707 	mla	r7, r3, r7, r4
 8001ade:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8001ae2:	e627      	b.n	8001734 <HAL_PCD_IRQHandler+0x1bc>
 8001ae4:	4f54310a 	.word	0x4f54310a
 8001ae8:	4f54300a 	.word	0x4f54300a

08001aec <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001aec:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001af0:	2a01      	cmp	r2, #1
{
 8001af2:	b510      	push	{r4, lr}
 8001af4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001af6:	d00b      	beq.n	8001b10 <HAL_PCD_SetAddress+0x24>
 8001af8:	2201      	movs	r2, #1
 8001afa:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001afe:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b02:	6800      	ldr	r0, [r0, #0]
 8001b04:	f001 f994 	bl	8002e30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001b0e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001b10:	2002      	movs	r0, #2
}
 8001b12:	bd10      	pop	{r4, pc}

08001b14 <HAL_PCD_EP_Open>:
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4604      	mov	r4, r0
 8001b18:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8001b1c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b20:	f04f 061c 	mov.w	r6, #28
 8001b24:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8001b2a:	bf15      	itete	ne
 8001b2c:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8001b30:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b34:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b36:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8001b3a:	bf15      	itete	ne
 8001b3c:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8001b3e:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8001b40:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8001b44:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8001b48:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001b4a:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8001b4c:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	b2c0      	uxtb	r0, r0
 8001b50:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8001b52:	b102      	cbz	r2, 8001b56 <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8001b54:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001b56:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001b58:	bf04      	itt	eq
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001b5e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d009      	beq.n	8001b7a <HAL_PCD_EP_Open+0x66>
 8001b66:	2301      	movs	r3, #1
 8001b68:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f000 fef8 	bl	8002962 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001b7a:	2002      	movs	r0, #2
}
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}

08001b7e <HAL_PCD_EP_Close>:
{
 8001b7e:	f001 030f 	and.w	r3, r1, #15
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	b510      	push	{r4, lr}
 8001b86:	4604      	mov	r4, r0
 8001b88:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8001b8a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8e:	fb00 4102 	mla	r1, r0, r2, r4
 8001b92:	bf19      	ittee	ne
 8001b94:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001b96:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8001b9a:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8001ba2:	bf15      	itete	ne
 8001ba4:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001ba6:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8001ba8:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8001bac:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bb0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001bb2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d009      	beq.n	8001bce <HAL_PCD_EP_Close+0x50>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	f000 ff11 	bl	80029e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001bcc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001bce:	2002      	movs	r0, #2
}
 8001bd0:	bd10      	pop	{r4, pc}

08001bd2 <HAL_PCD_EP_Receive>:
{
 8001bd2:	b538      	push	{r3, r4, r5, lr}
 8001bd4:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	241c      	movs	r4, #28
 8001bda:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001bde:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8001be6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001bea:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001bec:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8001bf0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001bf4:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf8:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001bfc:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bfe:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001c00:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001c02:	bf08      	it	eq
 8001c04:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8001c08:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0a:	b91d      	cbnz	r5, 8001c14 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c0c:	f000 ff1e 	bl	8002a4c <USB_EP0StartXfer>
}
 8001c10:	2000      	movs	r0, #0
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c14:	f000 ffb8 	bl	8002b88 <USB_EPStartXfer>
 8001c18:	e7fa      	b.n	8001c10 <HAL_PCD_EP_Receive+0x3e>

08001c1a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c1a:	231c      	movs	r3, #28
 8001c1c:	f001 010f 	and.w	r1, r1, #15
 8001c20:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001c24:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8001c28:	4770      	bx	lr

08001c2a <HAL_PCD_EP_Transmit>:
{
 8001c2a:	b538      	push	{r3, r4, r5, lr}
 8001c2c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	241c      	movs	r4, #28
 8001c32:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001c36:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8001c3c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001c42:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8001c44:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8001c46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001c4e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c50:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001c52:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001c54:	bf08      	it	eq
 8001c56:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8001c58:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c5a:	b91d      	cbnz	r5, 8001c64 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c5c:	f000 fef6 	bl	8002a4c <USB_EP0StartXfer>
}
 8001c60:	2000      	movs	r0, #0
 8001c62:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c64:	f000 ff90 	bl	8002b88 <USB_EPStartXfer>
 8001c68:	e7fa      	b.n	8001c60 <HAL_PCD_EP_Transmit+0x36>

08001c6a <HAL_PCD_EP_SetStall>:
{
 8001c6a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c6c:	6843      	ldr	r3, [r0, #4]
 8001c6e:	f001 050f 	and.w	r5, r1, #15
 8001c72:	429d      	cmp	r5, r3
{
 8001c74:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c76:	d82e      	bhi.n	8001cd6 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8001c78:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c7c:	f04f 021c 	mov.w	r2, #28
 8001c80:	d01f      	beq.n	8001cc2 <HAL_PCD_EP_SetStall+0x58>
    ep->is_in = 1U;
 8001c82:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8001c8a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8001c8e:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8001c92:	2201      	movs	r2, #1
 8001c94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c96:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001c98:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8001c9c:	4291      	cmp	r1, r2
 8001c9e:	d01c      	beq.n	8001cda <HAL_PCD_EP_SetStall+0x70>
 8001ca0:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6820      	ldr	r0, [r4, #0]
 8001ca8:	f001 f86a 	bl	8002d80 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cac:	b92d      	cbnz	r5, 8001cba <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cae:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001cb2:	7c21      	ldrb	r1, [r4, #16]
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	f001 f931 	bl	8002f1c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001cc0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001cc2:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8001cc6:	fb02 0101 	mla	r1, r2, r1, r0
 8001cca:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001ccc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8001cd0:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8001cd4:	e7dd      	b.n	8001c92 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001cda:	2002      	movs	r0, #2
}
 8001cdc:	bd38      	pop	{r3, r4, r5, pc}

08001cde <HAL_PCD_EP_ClrStall>:
{
 8001cde:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ce0:	6843      	ldr	r3, [r0, #4]
 8001ce2:	f001 020f 	and.w	r2, r1, #15
 8001ce6:	429a      	cmp	r2, r3
{
 8001ce8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cea:	d826      	bhi.n	8001d3a <HAL_PCD_EP_ClrStall+0x5c>
 8001cec:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8001cee:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf2:	fb03 0102 	mla	r1, r3, r2, r0
 8001cf6:	bf19      	ittee	ne
 8001cf8:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001cfa:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001d02:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8001d06:	bf14      	ite	ne
 8001d08:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001d0a:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8001d0c:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001d10:	bf14      	ite	ne
 8001d12:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8001d16:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001d1a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001d1e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d00b      	beq.n	8001d3e <HAL_PCD_EP_ClrStall+0x60>
 8001d26:	2301      	movs	r3, #1
 8001d28:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d2c:	6820      	ldr	r0, [r4, #0]
 8001d2e:	f001 f854 	bl	8002dda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d32:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001d36:	4628      	mov	r0, r5
 8001d38:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001d3e:	2002      	movs	r0, #2
}
 8001d40:	bd38      	pop	{r3, r4, r5, pc}

08001d42 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d42:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d44:	6804      	ldr	r4, [r0, #0]
 8001d46:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001d48:	b921      	cbnz	r1, 8001d54 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d4e:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001d50:	2000      	movs	r0, #0
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001d56:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001d58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	1c46      	adds	r6, r0, #1
 8001d60:	b2c0      	uxtb	r0, r0
 8001d62:	4285      	cmp	r5, r0
 8001d64:	d806      	bhi.n	8001d74 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001d66:	313f      	adds	r1, #63	; 0x3f
 8001d68:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001d6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d70:	6063      	str	r3, [r4, #4]
 8001d72:	e7ed      	b.n	8001d50 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001d74:	3040      	adds	r0, #64	; 0x40
 8001d76:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001d7a:	6840      	ldr	r0, [r0, #4]
 8001d7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8001d80:	4630      	mov	r0, r6
 8001d82:	e7ec      	b.n	8001d5e <HAL_PCDEx_SetTxFiFo+0x1c>

08001d84 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001d84:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001d86:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001d88:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_PCDEx_LPM_Callback>:
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d94:	4604      	mov	r4, r0
 8001d96:	b918      	cbnz	r0, 8001da0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001d9a:	b002      	add	sp, #8
 8001d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da0:	6803      	ldr	r3, [r0, #0]
 8001da2:	07dd      	lsls	r5, r3, #31
 8001da4:	d410      	bmi.n	8001dc8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	0798      	lsls	r0, r3, #30
 8001daa:	d458      	bmi.n	8001e5e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	071a      	lsls	r2, r3, #28
 8001db0:	f100 809a 	bmi.w	8001ee8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	075b      	lsls	r3, r3, #29
 8001db8:	f100 80b8 	bmi.w	8001f2c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbc:	69a2      	ldr	r2, [r4, #24]
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	f040 8119 	bne.w	8001ff6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7e8      	b.n	8001d9a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc8:	4ba6      	ldr	r3, [pc, #664]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	f002 020c 	and.w	r2, r2, #12
 8001dd0:	2a04      	cmp	r2, #4
 8001dd2:	d007      	beq.n	8001de4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	2a08      	cmp	r2, #8
 8001ddc:	d10a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0259      	lsls	r1, r3, #9
 8001de2:	d507      	bpl.n	8001df4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b9f      	ldr	r3, [pc, #636]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	039a      	lsls	r2, r3, #14
 8001dea:	d5dc      	bpl.n	8001da6 <HAL_RCC_OscConfig+0x16>
 8001dec:	6863      	ldr	r3, [r4, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1d9      	bne.n	8001da6 <HAL_RCC_OscConfig+0x16>
 8001df2:	e7d1      	b.n	8001d98 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df4:	6863      	ldr	r3, [r4, #4]
 8001df6:	4d9b      	ldr	r5, [pc, #620]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d111      	bne.n	8001e22 <HAL_RCC_OscConfig+0x92>
 8001dfe:	682b      	ldr	r3, [r5, #0]
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e06:	f7ff f9a5 	bl	8001154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4d96      	ldr	r5, [pc, #600]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001e0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	039b      	lsls	r3, r3, #14
 8001e12:	d4c8      	bmi.n	8001da6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f99e 	bl	8001154 <HAL_GetTick>
 8001e18:	1b80      	subs	r0, r0, r6
 8001e1a:	2864      	cmp	r0, #100	; 0x64
 8001e1c:	d9f7      	bls.n	8001e0e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001e1e:	2003      	movs	r0, #3
 8001e20:	e7bb      	b.n	8001d9a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e26:	d104      	bne.n	8001e32 <HAL_RCC_OscConfig+0xa2>
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2e:	602b      	str	r3, [r5, #0]
 8001e30:	e7e5      	b.n	8001dfe <HAL_RCC_OscConfig+0x6e>
 8001e32:	682a      	ldr	r2, [r5, #0]
 8001e34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e38:	602a      	str	r2, [r5, #0]
 8001e3a:	682a      	ldr	r2, [r5, #0]
 8001e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e40:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1df      	bne.n	8001e06 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001e46:	f7ff f985 	bl	8001154 <HAL_GetTick>
 8001e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	039f      	lsls	r7, r3, #14
 8001e50:	d5a9      	bpl.n	8001da6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e52:	f7ff f97f 	bl	8001154 <HAL_GetTick>
 8001e56:	1b80      	subs	r0, r0, r6
 8001e58:	2864      	cmp	r0, #100	; 0x64
 8001e5a:	d9f7      	bls.n	8001e4c <HAL_RCC_OscConfig+0xbc>
 8001e5c:	e7df      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5e:	4b81      	ldr	r3, [pc, #516]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	f012 0f0c 	tst.w	r2, #12
 8001e66:	d007      	beq.n	8001e78 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	2a08      	cmp	r2, #8
 8001e70:	d111      	bne.n	8001e96 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	025e      	lsls	r6, r3, #9
 8001e76:	d40e      	bmi.n	8001e96 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e78:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	0795      	lsls	r5, r2, #30
 8001e7e:	d502      	bpl.n	8001e86 <HAL_RCC_OscConfig+0xf6>
 8001e80:	68e2      	ldr	r2, [r4, #12]
 8001e82:	2a01      	cmp	r2, #1
 8001e84:	d188      	bne.n	8001d98 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	6921      	ldr	r1, [r4, #16]
 8001e8a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001e8e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001e92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e94:	e78a      	b.n	8001dac <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e96:	68e2      	ldr	r2, [r4, #12]
 8001e98:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x2d8>)
 8001e9a:	b1b2      	cbz	r2, 8001eca <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f958 	bl	8001154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4d6f      	ldr	r5, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001ea6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	0798      	lsls	r0, r3, #30
 8001eac:	d507      	bpl.n	8001ebe <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	6922      	ldr	r2, [r4, #16]
 8001eb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eba:	602b      	str	r3, [r5, #0]
 8001ebc:	e776      	b.n	8001dac <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f949 	bl	8001154 <HAL_GetTick>
 8001ec2:	1b80      	subs	r0, r0, r6
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9ef      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x118>
 8001ec8:	e7a9      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001eca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f942 	bl	8001154 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed0:	4d64      	ldr	r5, [pc, #400]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001ed2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed4:	682b      	ldr	r3, [r5, #0]
 8001ed6:	0799      	lsls	r1, r3, #30
 8001ed8:	f57f af68 	bpl.w	8001dac <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001edc:	f7ff f93a 	bl	8001154 <HAL_GetTick>
 8001ee0:	1b80      	subs	r0, r0, r6
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d9f6      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x144>
 8001ee6:	e79a      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee8:	6962      	ldr	r2, [r4, #20]
 8001eea:	4b60      	ldr	r3, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x2dc>)
 8001eec:	b17a      	cbz	r2, 8001f0e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f92f 	bl	8001154 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	4d5b      	ldr	r5, [pc, #364]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ef8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001efc:	079f      	lsls	r7, r3, #30
 8001efe:	f53f af59 	bmi.w	8001db4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f02:	f7ff f927 	bl	8001154 <HAL_GetTick>
 8001f06:	1b80      	subs	r0, r0, r6
 8001f08:	2802      	cmp	r0, #2
 8001f0a:	d9f6      	bls.n	8001efa <HAL_RCC_OscConfig+0x16a>
 8001f0c:	e787      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f10:	f7ff f920 	bl	8001154 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	4d53      	ldr	r5, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001f16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f1a:	0798      	lsls	r0, r3, #30
 8001f1c:	f57f af4a 	bpl.w	8001db4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f918 	bl	8001154 <HAL_GetTick>
 8001f24:	1b80      	subs	r0, r0, r6
 8001f26:	2802      	cmp	r0, #2
 8001f28:	d9f6      	bls.n	8001f18 <HAL_RCC_OscConfig+0x188>
 8001f2a:	e778      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f30:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001f34:	d128      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	9201      	str	r2, [sp, #4]
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f4a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4d48      	ldr	r5, [pc, #288]	; (8002070 <HAL_RCC_OscConfig+0x2e0>)
 8001f4e:	682b      	ldr	r3, [r5, #0]
 8001f50:	05d9      	lsls	r1, r3, #23
 8001f52:	d51b      	bpl.n	8001f8c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f54:	68a3      	ldr	r3, [r4, #8]
 8001f56:	4d43      	ldr	r5, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d127      	bne.n	8001fac <HAL_RCC_OscConfig+0x21c>
 8001f5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001f64:	f7ff f8f6 	bl	8001154 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4d3e      	ldr	r5, [pc, #248]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001f6a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f72:	079b      	lsls	r3, r3, #30
 8001f74:	d539      	bpl.n	8001fea <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001f76:	2e00      	cmp	r6, #0
 8001f78:	f43f af20 	beq.w	8001dbc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4a39      	ldr	r2, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001f7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	e719      	b.n	8001dbc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2600      	movs	r6, #0
 8001f8a:	e7df      	b.n	8001f4c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001f94:	f7ff f8de 	bl	8001154 <HAL_GetTick>
 8001f98:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	682b      	ldr	r3, [r5, #0]
 8001f9c:	05da      	lsls	r2, r3, #23
 8001f9e:	d4d9      	bmi.n	8001f54 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7ff f8d8 	bl	8001154 <HAL_GetTick>
 8001fa4:	1bc0      	subs	r0, r0, r7
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9f7      	bls.n	8001f9a <HAL_RCC_OscConfig+0x20a>
 8001faa:	e738      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d104      	bne.n	8001fba <HAL_RCC_OscConfig+0x22a>
 8001fb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	672b      	str	r3, [r5, #112]	; 0x70
 8001fb8:	e7d0      	b.n	8001f5c <HAL_RCC_OscConfig+0x1cc>
 8001fba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	672a      	str	r2, [r5, #112]	; 0x70
 8001fc2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001fc4:	f022 0204 	bic.w	r2, r2, #4
 8001fc8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ca      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001fce:	f7ff f8c1 	bl	8001154 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fd6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001fda:	0798      	lsls	r0, r3, #30
 8001fdc:	d5cb      	bpl.n	8001f76 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff f8b9 	bl	8001154 <HAL_GetTick>
 8001fe2:	1bc0      	subs	r0, r0, r7
 8001fe4:	4540      	cmp	r0, r8
 8001fe6:	d9f7      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x248>
 8001fe8:	e719      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f8b3 	bl	8001154 <HAL_GetTick>
 8001fee:	1bc0      	subs	r0, r0, r7
 8001ff0:	4540      	cmp	r0, r8
 8001ff2:	d9bd      	bls.n	8001f70 <HAL_RCC_OscConfig+0x1e0>
 8001ff4:	e713      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff6:	4d1b      	ldr	r5, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
 8001ff8:	68ab      	ldr	r3, [r5, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	f43f aeca 	beq.w	8001d98 <HAL_RCC_OscConfig+0x8>
 8002004:	4e1b      	ldr	r6, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x2e4>)
 8002006:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800200a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	d134      	bne.n	8002078 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800200e:	f7ff f8a1 	bl	8001154 <HAL_GetTick>
 8002012:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002014:	682b      	ldr	r3, [r5, #0]
 8002016:	0199      	lsls	r1, r3, #6
 8002018:	d41e      	bmi.n	8002058 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201a:	6a22      	ldr	r2, [r4, #32]
 800201c:	69e3      	ldr	r3, [r4, #28]
 800201e:	4313      	orrs	r3, r2
 8002020:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002022:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800202c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4c0d      	ldr	r4, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002030:	0852      	lsrs	r2, r2, #1
 8002032:	3a01      	subs	r2, #1
 8002034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002038:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800203a:	2301      	movs	r3, #1
 800203c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800203e:	f7ff f889 	bl	8001154 <HAL_GetTick>
 8002042:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	019a      	lsls	r2, r3, #6
 8002048:	f53f aebc 	bmi.w	8001dc4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f882 	bl	8001154 <HAL_GetTick>
 8002050:	1b40      	subs	r0, r0, r5
 8002052:	2802      	cmp	r0, #2
 8002054:	d9f6      	bls.n	8002044 <HAL_RCC_OscConfig+0x2b4>
 8002056:	e6e2      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f87c 	bl	8001154 <HAL_GetTick>
 800205c:	1bc0      	subs	r0, r0, r7
 800205e:	2802      	cmp	r0, #2
 8002060:	d9d8      	bls.n	8002014 <HAL_RCC_OscConfig+0x284>
 8002062:	e6dc      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
 8002064:	40023800 	.word	0x40023800
 8002068:	42470000 	.word	0x42470000
 800206c:	42470e80 	.word	0x42470e80
 8002070:	40007000 	.word	0x40007000
 8002074:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002078:	f7ff f86c 	bl	8001154 <HAL_GetTick>
 800207c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	682b      	ldr	r3, [r5, #0]
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	f57f ae9f 	bpl.w	8001dc4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff f865 	bl	8001154 <HAL_GetTick>
 800208a:	1b00      	subs	r0, r0, r4
 800208c:	2802      	cmp	r0, #2
 800208e:	d9f6      	bls.n	800207e <HAL_RCC_OscConfig+0x2ee>
 8002090:	e6c5      	b.n	8001e1e <HAL_RCC_OscConfig+0x8e>
 8002092:	bf00      	nop

08002094 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002094:	4b01      	ldr	r3, [pc, #4]	; (800209c <HAL_RCC_EnableCSS+0x8>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	4770      	bx	lr
 800209c:	4247004c 	.word	0x4247004c

080020a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a0:	4913      	ldr	r1, [pc, #76]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80020a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a4:	688b      	ldr	r3, [r1, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x16>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b2:	4810      	ldr	r0, [pc, #64]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80020b6:	4810      	ldr	r0, [pc, #64]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80020b8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020bc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c4:	bf14      	ite	ne
 80020c6:	480c      	ldrne	r0, [pc, #48]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c8:	480a      	ldreq	r0, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80020ce:	bf18      	it	ne
 80020d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d6:	fba1 0100 	umull	r0, r1, r1, r0
 80020da:	f7fe f8d9 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020e6:	3301      	adds	r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80020ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80020ee:	bd08      	pop	{r3, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	007a1200 	.word	0x007a1200

080020fc <HAL_RCC_ClockConfig>:
{
 80020fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002100:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002102:	4604      	mov	r4, r0
 8002104:	b910      	cbnz	r0, 800210c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002106:	2001      	movs	r0, #1
 8002108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b44      	ldr	r3, [pc, #272]	; (8002220 <HAL_RCC_ClockConfig+0x124>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f002 020f 	and.w	r2, r2, #15
 8002114:	428a      	cmp	r2, r1
 8002116:	d328      	bcc.n	800216a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	6821      	ldr	r1, [r4, #0]
 800211a:	078f      	lsls	r7, r1, #30
 800211c:	d42d      	bmi.n	800217a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	07c8      	lsls	r0, r1, #31
 8002120:	d440      	bmi.n	80021a4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x124>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f002 020f 	and.w	r2, r2, #15
 800212a:	4295      	cmp	r5, r2
 800212c:	d366      	bcc.n	80021fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	0751      	lsls	r1, r2, #29
 8002132:	d46c      	bmi.n	800220e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	0713      	lsls	r3, r2, #28
 8002136:	d507      	bpl.n	8002148 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002138:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <HAL_RCC_ClockConfig+0x128>)
 800213a:	6921      	ldr	r1, [r4, #16]
 800213c:	6893      	ldr	r3, [r2, #8]
 800213e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002142:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002146:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002148:	f7ff ffaa 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_ClockConfig+0x128>)
 800214e:	4a36      	ldr	r2, [pc, #216]	; (8002228 <HAL_RCC_ClockConfig+0x12c>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	40d8      	lsrs	r0, r3
 800215a:	4b34      	ldr	r3, [pc, #208]	; (800222c <HAL_RCC_ClockConfig+0x130>)
 800215c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe ffae 	bl	80010c0 <HAL_InitTick>
  return HAL_OK;
 8002164:	2000      	movs	r0, #0
 8002166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4299      	cmp	r1, r3
 8002176:	d1c6      	bne.n	8002106 <HAL_RCC_ClockConfig+0xa>
 8002178:	e7ce      	b.n	8002118 <HAL_RCC_ClockConfig+0x1c>
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002180:	bf1e      	ittt	ne
 8002182:	689a      	ldrne	r2, [r3, #8]
 8002184:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002188:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	bf42      	ittt	mi
 800218e:	689a      	ldrmi	r2, [r3, #8]
 8002190:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002194:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68a0      	ldr	r0, [r4, #8]
 800219a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800219e:	4302      	orrs	r2, r0
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	e7bc      	b.n	800211e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a4:	6862      	ldr	r2, [r4, #4]
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <HAL_RCC_ClockConfig+0x128>)
 80021a8:	2a01      	cmp	r2, #1
 80021aa:	d11d      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	d0a8      	beq.n	8002106 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b4:	4e1b      	ldr	r6, [pc, #108]	; (8002224 <HAL_RCC_ClockConfig+0x128>)
 80021b6:	68b3      	ldr	r3, [r6, #8]
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	4313      	orrs	r3, r2
 80021be:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80021c0:	f7fe ffc8 	bl	8001154 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	68b3      	ldr	r3, [r6, #8]
 80021cc:	6862      	ldr	r2, [r4, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021d6:	d0a4      	beq.n	8002122 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe ffbc 	bl	8001154 <HAL_GetTick>
 80021dc:	1bc0      	subs	r0, r0, r7
 80021de:	4540      	cmp	r0, r8
 80021e0:	d9f3      	bls.n	80021ca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80021e2:	2003      	movs	r0, #3
}
 80021e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e8:	1e91      	subs	r1, r2, #2
 80021ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ee:	d802      	bhi.n	80021f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021f4:	e7dd      	b.n	80021b2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f6:	f013 0f02 	tst.w	r3, #2
 80021fa:	e7da      	b.n	80021b2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fc:	b2ea      	uxtb	r2, r5
 80021fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	429d      	cmp	r5, r3
 8002208:	f47f af7d 	bne.w	8002106 <HAL_RCC_ClockConfig+0xa>
 800220c:	e78f      	b.n	800212e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220e:	4905      	ldr	r1, [pc, #20]	; (8002224 <HAL_RCC_ClockConfig+0x128>)
 8002210:	68e0      	ldr	r0, [r4, #12]
 8002212:	688b      	ldr	r3, [r1, #8]
 8002214:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002218:	4303      	orrs	r3, r0
 800221a:	608b      	str	r3, [r1, #8]
 800221c:	e78a      	b.n	8002134 <HAL_RCC_ClockConfig+0x38>
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00
 8002224:	40023800 	.word	0x40023800
 8002228:	08004311 	.word	0x08004311
 800222c:	20000060 	.word	0x20000060

08002230 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002230:	4b01      	ldr	r3, [pc, #4]	; (8002238 <HAL_RCC_GetHCLKFreq+0x8>)
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000060 	.word	0x20000060

0800223c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800223c:	4770      	bx	lr
	...

08002240 <HAL_RCC_NMI_IRQHandler>:
{
 8002240:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_NMI_IRQHandler+0x18>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	061b      	lsls	r3, r3, #24
 8002248:	d504      	bpl.n	8002254 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 800224a:	f7ff fff7 	bl	800223c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800224e:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	bd08      	pop	{r3, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	4002380e 	.word	0x4002380e

08002260 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	4604      	mov	r4, r0
 8002264:	460e      	mov	r6, r1
 8002266:	4615      	mov	r5, r2
 8002268:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800226a:	6821      	ldr	r1, [r4, #0]
 800226c:	688a      	ldr	r2, [r1, #8]
 800226e:	ea36 0302 	bics.w	r3, r6, r2
 8002272:	d001      	beq.n	8002278 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002278:	1c6b      	adds	r3, r5, #1
 800227a:	d0f7      	beq.n	800226c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800227c:	f7fe ff6a 	bl	8001154 <HAL_GetTick>
 8002280:	1bc0      	subs	r0, r0, r7
 8002282:	4285      	cmp	r5, r0
 8002284:	d8f1      	bhi.n	800226a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800228e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002290:	6862      	ldr	r2, [r4, #4]
 8002292:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002296:	d10a      	bne.n	80022ae <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8002298:	68a2      	ldr	r2, [r4, #8]
 800229a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800229e:	d002      	beq.n	80022a6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022a4:	d103      	bne.n	80022ae <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80022b4:	d107      	bne.n	80022c6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80022cc:	2300      	movs	r3, #0
 80022ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80022d2:	2003      	movs	r0, #3
 80022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022da:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022dc:	4a13      	ldr	r2, [pc, #76]	; (800232c <SPI_EndRxTxTransaction+0x54>)
 80022de:	4e14      	ldr	r6, [pc, #80]	; (8002330 <SPI_EndRxTxTransaction+0x58>)
 80022e0:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022e2:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022e4:	fbb5 f6f6 	udiv	r6, r5, r6
 80022e8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80022ec:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80022f2:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022f4:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f6:	d10d      	bne.n	8002314 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022f8:	460a      	mov	r2, r1
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	f7ff ffb0 	bl	8002260 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8002300:	b910      	cbnz	r0, 8002308 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8002302:	2000      	movs	r0, #0
}
 8002304:	b002      	add	sp, #8
 8002306:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002308:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800230a:	f043 0320 	orr.w	r3, r3, #32
 800230e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002310:	2003      	movs	r0, #3
 8002312:	e7f7      	b.n	8002304 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f3      	beq.n	8002302 <SPI_EndRxTxTransaction+0x2a>
      count--;
 800231a:	9b01      	ldr	r3, [sp, #4]
 800231c:	3b01      	subs	r3, #1
 800231e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	d4f5      	bmi.n	8002314 <SPI_EndRxTxTransaction+0x3c>
 8002328:	e7eb      	b.n	8002302 <SPI_EndRxTxTransaction+0x2a>
 800232a:	bf00      	nop
 800232c:	20000060 	.word	0x20000060
 8002330:	016e3600 	.word	0x016e3600

08002334 <HAL_SPI_Init>:
{
 8002334:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002336:	4604      	mov	r4, r0
 8002338:	2800      	cmp	r0, #0
 800233a:	d036      	beq.n	80023aa <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002340:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002344:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002348:	b91b      	cbnz	r3, 8002352 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800234a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800234e:	f7fe fc13 	bl	8000b78 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002352:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002354:	68a0      	ldr	r0, [r4, #8]
 8002356:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002358:	2302      	movs	r3, #2
 800235a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800235e:	680b      	ldr	r3, [r1, #0]
 8002360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002364:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002366:	6863      	ldr	r3, [r4, #4]
 8002368:	4303      	orrs	r3, r0
 800236a:	68e0      	ldr	r0, [r4, #12]
 800236c:	4303      	orrs	r3, r0
 800236e:	6920      	ldr	r0, [r4, #16]
 8002370:	4303      	orrs	r3, r0
 8002372:	6960      	ldr	r0, [r4, #20]
 8002374:	4303      	orrs	r3, r0
 8002376:	69e0      	ldr	r0, [r4, #28]
 8002378:	4303      	orrs	r3, r0
 800237a:	6a20      	ldr	r0, [r4, #32]
 800237c:	4303      	orrs	r3, r0
 800237e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002380:	4303      	orrs	r3, r0
 8002382:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002386:	4303      	orrs	r3, r0
 8002388:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800238a:	0c12      	lsrs	r2, r2, #16
 800238c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800238e:	f002 0204 	and.w	r2, r2, #4
 8002392:	431a      	orrs	r2, r3
 8002394:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002396:	69cb      	ldr	r3, [r1, #28]
 8002398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800239c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800239e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80023a0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80023a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
}
 80023ac:	bd10      	pop	{r4, pc}

080023ae <HAL_SPI_TransmitReceive>:
{
 80023ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80023b2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80023b4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80023b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80023ba:	2b01      	cmp	r3, #1
{
 80023bc:	4604      	mov	r4, r0
 80023be:	460d      	mov	r5, r1
 80023c0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80023c2:	f000 80e2 	beq.w	800258a <HAL_SPI_TransmitReceive+0x1dc>
 80023c6:	2301      	movs	r3, #1
 80023c8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80023cc:	f7fe fec2 	bl	8001154 <HAL_GetTick>
  tmp_state           = hspi->State;
 80023d0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80023d4:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80023d6:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023d8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80023da:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023dc:	d00a      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0x46>
 80023de:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80023e2:	f040 80d0 	bne.w	8002586 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023e6:	68a0      	ldr	r0, [r4, #8]
 80023e8:	2800      	cmp	r0, #0
 80023ea:	f040 80cc 	bne.w	8002586 <HAL_SPI_TransmitReceive+0x1d8>
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	f040 80c9 	bne.w	8002586 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023f4:	2d00      	cmp	r5, #0
 80023f6:	f000 80c4 	beq.w	8002582 <HAL_SPI_TransmitReceive+0x1d4>
 80023fa:	f1b9 0f00 	cmp.w	r9, #0
 80023fe:	f000 80c0 	beq.w	8002582 <HAL_SPI_TransmitReceive+0x1d4>
 8002402:	2e00      	cmp	r6, #0
 8002404:	f000 80bd 	beq.w	8002582 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002408:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800240c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002410:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002412:	bf1c      	itt	ne
 8002414:	2305      	movne	r3, #5
 8002416:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800241a:	2300      	movs	r3, #0
 800241c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800241e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002420:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002422:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002424:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002426:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002428:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800242a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800242c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800242e:	bf58      	it	pl
 8002430:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002432:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002434:	bf58      	it	pl
 8002436:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800243a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800243c:	bf58      	it	pl
 800243e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002440:	68e2      	ldr	r2, [r4, #12]
 8002442:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002446:	d158      	bne.n	80024fa <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002448:	b109      	cbz	r1, 800244e <HAL_SPI_TransmitReceive+0xa0>
 800244a:	2e01      	cmp	r6, #1
 800244c:	d107      	bne.n	800245e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002452:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002454:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002456:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002458:	3b01      	subs	r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800245e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002460:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002462:	b29b      	uxth	r3, r3
 8002464:	b9ab      	cbnz	r3, 8002492 <HAL_SPI_TransmitReceive+0xe4>
 8002466:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	b993      	cbnz	r3, 8002492 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246c:	4642      	mov	r2, r8
 800246e:	4639      	mov	r1, r7
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff ff31 	bl	80022d8 <SPI_EndRxTxTransaction>
 8002476:	2800      	cmp	r0, #0
 8002478:	f040 8081 	bne.w	800257e <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800247c:	68a3      	ldr	r3, [r4, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d132      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	9001      	str	r0, [sp, #4]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	9201      	str	r2, [sp, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	9b01      	ldr	r3, [sp, #4]
 8002490:	e02a      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002492:	6822      	ldr	r2, [r4, #0]
 8002494:	6893      	ldr	r3, [r2, #8]
 8002496:	0799      	lsls	r1, r3, #30
 8002498:	d50d      	bpl.n	80024b6 <HAL_SPI_TransmitReceive+0x108>
 800249a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800249c:	b29b      	uxth	r3, r3
 800249e:	b153      	cbz	r3, 80024b6 <HAL_SPI_TransmitReceive+0x108>
 80024a0:	b14d      	cbz	r5, 80024b6 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024a4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80024a8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024aa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80024ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80024b4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b6:	6893      	ldr	r3, [r2, #8]
 80024b8:	07db      	lsls	r3, r3, #31
 80024ba:	d50c      	bpl.n	80024d6 <HAL_SPI_TransmitReceive+0x128>
 80024bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b14b      	cbz	r3, 80024d6 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80024cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024d4:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024d6:	f7fe fe3d 	bl	8001154 <HAL_GetTick>
 80024da:	eba0 0008 	sub.w	r0, r0, r8
 80024de:	4287      	cmp	r7, r0
 80024e0:	d8be      	bhi.n	8002460 <HAL_SPI_TransmitReceive+0xb2>
 80024e2:	1c7e      	adds	r6, r7, #1
 80024e4:	d0bc      	beq.n	8002460 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80024e6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024ee:	2300      	movs	r3, #0
 80024f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80024f4:	b003      	add	sp, #12
 80024f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024fa:	b109      	cbz	r1, 8002500 <HAL_SPI_TransmitReceive+0x152>
 80024fc:	2e01      	cmp	r6, #1
 80024fe:	d108      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002500:	782a      	ldrb	r2, [r5, #0]
 8002502:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002504:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002506:	3301      	adds	r3, #1
 8002508:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800250a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800250c:	3b01      	subs	r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002512:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002514:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	b91b      	cbnz	r3, 8002522 <HAL_SPI_TransmitReceive+0x174>
 800251a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0a4      	beq.n	800246c <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	6893      	ldr	r3, [r2, #8]
 8002526:	0798      	lsls	r0, r3, #30
 8002528:	d50e      	bpl.n	8002548 <HAL_SPI_TransmitReceive+0x19a>
 800252a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800252c:	b29b      	uxth	r3, r3
 800252e:	b15b      	cbz	r3, 8002548 <HAL_SPI_TransmitReceive+0x19a>
 8002530:	b155      	cbz	r5, 8002548 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800253a:	3301      	adds	r3, #1
 800253c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800253e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002540:	3b01      	subs	r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002546:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002548:	6822      	ldr	r2, [r4, #0]
 800254a:	6893      	ldr	r3, [r2, #8]
 800254c:	07d9      	lsls	r1, r3, #31
 800254e:	d50d      	bpl.n	800256c <HAL_SPI_TransmitReceive+0x1be>
 8002550:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	b153      	cbz	r3, 800256c <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800255c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800255e:	3301      	adds	r3, #1
 8002560:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002562:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002564:	3b01      	subs	r3, #1
 8002566:	b29b      	uxth	r3, r3
 8002568:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800256a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800256c:	f7fe fdf2 	bl	8001154 <HAL_GetTick>
 8002570:	eba0 0008 	sub.w	r0, r0, r8
 8002574:	4287      	cmp	r7, r0
 8002576:	d8cd      	bhi.n	8002514 <HAL_SPI_TransmitReceive+0x166>
 8002578:	1c7b      	adds	r3, r7, #1
 800257a:	d0cb      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x166>
 800257c:	e7b3      	b.n	80024e6 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800257e:	2320      	movs	r3, #32
 8002580:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002582:	2001      	movs	r0, #1
 8002584:	e7b0      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002586:	2002      	movs	r0, #2
 8002588:	e7ae      	b.n	80024e8 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800258a:	2002      	movs	r0, #2
 800258c:	e7b2      	b.n	80024f4 <HAL_SPI_TransmitReceive+0x146>
	...

08002590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002592:	3b01      	subs	r3, #1
 8002594:	d101      	bne.n	800259a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002596:	2003      	movs	r0, #3
 8002598:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800259a:	6902      	ldr	r2, [r0, #16]
 800259c:	2a00      	cmp	r2, #0
 800259e:	daf8      	bge.n	8002592 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80025a0:	6903      	ldr	r3, [r0, #16]
 80025a2:	4a06      	ldr	r2, [pc, #24]	; (80025bc <USB_CoreReset+0x2c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80025aa:	3a01      	subs	r2, #1
 80025ac:	d0f3      	beq.n	8002596 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80025ae:	6903      	ldr	r3, [r0, #16]
 80025b0:	f013 0301 	ands.w	r3, r3, #1
 80025b4:	d1f9      	bne.n	80025aa <USB_CoreReset+0x1a>

  return HAL_OK;
 80025b6:	4618      	mov	r0, r3
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	00030d41 	.word	0x00030d41

080025c0 <USB_CoreInit>:
{
 80025c0:	b084      	sub	sp, #16
 80025c2:	b538      	push	{r3, r4, r5, lr}
 80025c4:	ad05      	add	r5, sp, #20
 80025c6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025cc:	2b01      	cmp	r3, #1
{
 80025ce:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80025d0:	d125      	bne.n	800261e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80025d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80025da:	68c3      	ldr	r3, [r0, #12]
 80025dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80025e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80025e6:	68c3      	ldr	r3, [r0, #12]
 80025e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80025ec:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80025ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025f0:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80025f2:	bf02      	ittt	eq
 80025f4:	68c3      	ldreq	r3, [r0, #12]
 80025f6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80025fa:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80025fc:	f7ff ffc8 	bl	8002590 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002600:	9b08      	ldr	r3, [sp, #32]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002606:	68a3      	ldr	r3, [r4, #8]
 8002608:	f043 0306 	orr.w	r3, r3, #6
 800260c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800260e:	68a3      	ldr	r3, [r4, #8]
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	60a3      	str	r3, [r4, #8]
}
 8002616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800261a:	b004      	add	sp, #16
 800261c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800261e:	68c3      	ldr	r3, [r0, #12]
 8002620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002624:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002626:	f7ff ffb3 	bl	8002590 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800262a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800262c:	b923      	cbnz	r3, 8002638 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800262e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002634:	63a3      	str	r3, [r4, #56]	; 0x38
 8002636:	e7e3      	b.n	8002600 <USB_CoreInit+0x40>
 8002638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	e7f9      	b.n	8002634 <USB_CoreInit+0x74>

08002640 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002640:	2a02      	cmp	r2, #2
 8002642:	d158      	bne.n	80026f6 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <USB_SetTurnaroundTime+0xc0>)
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <USB_SetTurnaroundTime+0xc4>)
 8002648:	440b      	add	r3, r1
 800264a:	4293      	cmp	r3, r2
 800264c:	d947      	bls.n	80026de <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <USB_SetTurnaroundTime+0xc8>)
 8002650:	4a2e      	ldr	r2, [pc, #184]	; (800270c <USB_SetTurnaroundTime+0xcc>)
 8002652:	440b      	add	r3, r1
 8002654:	4293      	cmp	r3, r2
 8002656:	d944      	bls.n	80026e2 <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002658:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800265c:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <USB_SetTurnaroundTime+0xd0>)
 800265e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002662:	4293      	cmp	r3, r2
 8002664:	d93f      	bls.n	80026e6 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002666:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800266a:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800266e:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002672:	32a0      	adds	r2, #160	; 0xa0
 8002674:	4293      	cmp	r3, r2
 8002676:	d938      	bls.n	80026ea <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <USB_SetTurnaroundTime+0xd4>)
 800267a:	4a27      	ldr	r2, [pc, #156]	; (8002718 <USB_SetTurnaroundTime+0xd8>)
 800267c:	440b      	add	r3, r1
 800267e:	4293      	cmp	r3, r2
 8002680:	d935      	bls.n	80026ee <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <USB_SetTurnaroundTime+0xdc>)
 8002684:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8002688:	440b      	add	r3, r1
 800268a:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800268e:	4293      	cmp	r3, r2
 8002690:	d92f      	bls.n	80026f2 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <USB_SetTurnaroundTime+0xe0>)
 8002694:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8002698:	440b      	add	r3, r1
 800269a:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800269e:	4293      	cmp	r3, r2
 80026a0:	d929      	bls.n	80026f6 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80026a2:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80026a6:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 80026aa:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80026ae:	f502 7258 	add.w	r2, r2, #864	; 0x360
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d921      	bls.n	80026fa <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 80026b8:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80026bc:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80026be:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 80026c2:	4293      	cmp	r3, r2
 80026c4:	bf94      	ite	ls
 80026c6:	2307      	movls	r3, #7
 80026c8:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80026ca:	68c2      	ldr	r2, [r0, #12]
 80026cc:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80026d0:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80026d2:	68c2      	ldr	r2, [r0, #12]
 80026d4:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80026d8:	60c3      	str	r3, [r0, #12]
}
 80026da:	2000      	movs	r0, #0
 80026dc:	4770      	bx	lr
      UsbTrd = 0xFU;
 80026de:	230f      	movs	r3, #15
 80026e0:	e7f3      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 80026e2:	230e      	movs	r3, #14
 80026e4:	e7f1      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 80026e6:	230d      	movs	r3, #13
 80026e8:	e7ef      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 80026ea:	230c      	movs	r3, #12
 80026ec:	e7ed      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 80026ee:	230b      	movs	r3, #11
 80026f0:	e7eb      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 80026f2:	230a      	movs	r3, #10
 80026f4:	e7e9      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80026f6:	2309      	movs	r3, #9
 80026f8:	e7e7      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 80026fa:	2308      	movs	r3, #8
 80026fc:	e7e5      	b.n	80026ca <USB_SetTurnaroundTime+0x8a>
 80026fe:	bf00      	nop
 8002700:	ff275340 	.word	0xff275340
 8002704:	000c34ff 	.word	0x000c34ff
 8002708:	ff1b1e40 	.word	0xff1b1e40
 800270c:	000f423f 	.word	0x000f423f
 8002710:	00124f7f 	.word	0x00124f7f
 8002714:	fee5b660 	.word	0xfee5b660
 8002718:	0016e35f 	.word	0x0016e35f
 800271c:	feced300 	.word	0xfeced300
 8002720:	feb35bc0 	.word	0xfeb35bc0
 8002724:	fe5954e0 	.word	0xfe5954e0

08002728 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002728:	6883      	ldr	r3, [r0, #8]
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6083      	str	r3, [r0, #8]
}
 8002730:	2000      	movs	r0, #0
 8002732:	4770      	bx	lr

08002734 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002734:	6883      	ldr	r3, [r0, #8]
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6083      	str	r3, [r0, #8]
}
 800273c:	2000      	movs	r0, #0
 800273e:	4770      	bx	lr

08002740 <USB_SetCurrentMode>:
{
 8002740:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002742:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002744:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002746:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800274a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800274c:	d108      	bne.n	8002760 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800274e:	68c3      	ldr	r3, [r0, #12]
 8002750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002754:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002756:	2032      	movs	r0, #50	; 0x32
 8002758:	f7fe fd02 	bl	8001160 <HAL_Delay>
  return HAL_OK;
 800275c:	2000      	movs	r0, #0
 800275e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002760:	b919      	cbnz	r1, 800276a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002762:	68c3      	ldr	r3, [r0, #12]
 8002764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002768:	e7f4      	b.n	8002754 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
}
 800276c:	bd08      	pop	{r3, pc}
	...

08002770 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002770:	0189      	lsls	r1, r1, #6
 8002772:	f041 0120 	orr.w	r1, r1, #32
 8002776:	4a06      	ldr	r2, [pc, #24]	; (8002790 <USB_FlushTxFifo+0x20>)
 8002778:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800277a:	3a01      	subs	r2, #1
 800277c:	d005      	beq.n	800278a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800277e:	6903      	ldr	r3, [r0, #16]
 8002780:	f013 0320 	ands.w	r3, r3, #32
 8002784:	d1f9      	bne.n	800277a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002786:	4618      	mov	r0, r3
 8002788:	4770      	bx	lr
      return HAL_TIMEOUT;
 800278a:	2003      	movs	r0, #3
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	00030d41 	.word	0x00030d41

08002794 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002794:	2310      	movs	r3, #16
 8002796:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <USB_FlushRxFifo+0x1c>)
 8002798:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800279a:	3a01      	subs	r2, #1
 800279c:	d005      	beq.n	80027aa <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800279e:	6903      	ldr	r3, [r0, #16]
 80027a0:	f013 0310 	ands.w	r3, r3, #16
 80027a4:	d1f9      	bne.n	800279a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80027a6:	4618      	mov	r0, r3
 80027a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80027aa:	2003      	movs	r0, #3
}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	00030d41 	.word	0x00030d41

080027b4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80027b4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80027b8:	4319      	orrs	r1, r3
 80027ba:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80027be:	2000      	movs	r0, #0
 80027c0:	4770      	bx	lr
	...

080027c4 <USB_DevInit>:
{
 80027c4:	b084      	sub	sp, #16
 80027c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ca:	4604      	mov	r4, r0
 80027cc:	a809      	add	r0, sp, #36	; 0x24
 80027ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80027d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80027d8:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 80027da:	4619      	mov	r1, r3
 80027dc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80027e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80027e4:	3301      	adds	r3, #1
 80027e6:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80027e8:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80027ea:	d1f7      	bne.n	80027dc <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 80027ec:	2e00      	cmp	r6, #0
 80027ee:	d173      	bne.n	80028d8 <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80027f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80027f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80027fe:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002806:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800280e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002812:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002818:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800281a:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800281e:	d165      	bne.n	80028ec <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8002820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002822:	2900      	cmp	r1, #0
 8002824:	d160      	bne.n	80028e8 <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff ffc4 	bl	80027b4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800282c:	2110      	movs	r1, #16
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff ff9e 	bl	8002770 <USB_FlushTxFifo>
 8002834:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff ffac 	bl	8002794 <USB_FlushRxFifo>
 800283c:	2800      	cmp	r0, #0
 800283e:	d157      	bne.n	80028f0 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002840:	1c08      	adds	r0, r1, #0
 8002842:	bf18      	it	ne
 8002844:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	612b      	str	r3, [r5, #16]
 800284a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 800284e:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002850:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8002852:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002854:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002858:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800285c:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002860:	4543      	cmp	r3, r8
 8002862:	d147      	bne.n	80028f4 <USB_DevInit+0x130>
 8002864:	2100      	movs	r1, #0
 8002866:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800286a:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800286c:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002870:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002874:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002878:	428b      	cmp	r3, r1
 800287a:	d14e      	bne.n	800291a <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800287c:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800287e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002884:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002886:	d107      	bne.n	8002898 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <USB_DevInit+0x180>)
 800288a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800288c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	f043 0303 	orr.w	r3, r3, #3
 8002896:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800289c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80028a0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80028a2:	b91f      	cbnz	r7, 80028ac <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80028a4:	69a3      	ldr	r3, [r4, #24]
 80028a6:	f043 0310 	orr.w	r3, r3, #16
 80028aa:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028ac:	69a2      	ldr	r2, [r4, #24]
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <USB_DevInit+0x184>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80028b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028b6:	b11b      	cbz	r3, 80028c0 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80028b8:	69a3      	ldr	r3, [r4, #24]
 80028ba:	f043 0308 	orr.w	r3, r3, #8
 80028be:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80028c0:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80028c2:	bf01      	itttt	eq
 80028c4:	69a3      	ldreq	r3, [r4, #24]
 80028c6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80028ca:	f043 0304 	orreq.w	r3, r3, #4
 80028ce:	61a3      	streq	r3, [r4, #24]
}
 80028d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	b004      	add	sp, #16
 80028d6:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028de:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80028e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028e6:	e78e      	b.n	8002806 <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80028e8:	4619      	mov	r1, r3
 80028ea:	e79c      	b.n	8002826 <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80028ec:	2103      	movs	r1, #3
 80028ee:	e79a      	b.n	8002826 <USB_DevInit+0x62>
 80028f0:	2001      	movs	r0, #1
 80028f2:	e7a8      	b.n	8002846 <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80028f4:	f8d2 a000 	ldr.w	sl, [r2]
 80028f8:	f1ba 0f00 	cmp.w	sl, #0
 80028fc:	da0b      	bge.n	8002916 <USB_DevInit+0x152>
      if (i == 0U)
 80028fe:	b93b      	cbnz	r3, 8002910 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002900:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002904:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002906:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002908:	f8c2 9008 	str.w	r9, [r2, #8]
 800290c:	3220      	adds	r2, #32
 800290e:	e7a7      	b.n	8002860 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002910:	f8c2 e000 	str.w	lr, [r2]
 8002914:	e7f6      	b.n	8002904 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002916:	6011      	str	r1, [r2, #0]
 8002918:	e7f4      	b.n	8002904 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800291a:	f8d2 a000 	ldr.w	sl, [r2]
 800291e:	f1ba 0f00 	cmp.w	sl, #0
 8002922:	da0c      	bge.n	800293e <USB_DevInit+0x17a>
      if (i == 0U)
 8002924:	b941      	cbnz	r1, 8002938 <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002926:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800292a:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800292e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002930:	f8c2 9008 	str.w	r9, [r2, #8]
 8002934:	3220      	adds	r2, #32
 8002936:	e79f      	b.n	8002878 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002938:	f8c2 c000 	str.w	ip, [r2]
 800293c:	e7f5      	b.n	800292a <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800293e:	f8c2 e000 	str.w	lr, [r2]
 8002942:	e7f2      	b.n	800292a <USB_DevInit+0x166>
 8002944:	00800100 	.word	0x00800100
 8002948:	803c3800 	.word	0x803c3800

0800294c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800294c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002950:	f013 0006 	ands.w	r0, r3, #6
 8002954:	d004      	beq.n	8002960 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002956:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800295a:	bf14      	ite	ne
 800295c:	2002      	movne	r0, #2
 800295e:	200f      	moveq	r0, #15
}
 8002960:	4770      	bx	lr

08002962 <USB_ActivateEndpoint>:
{
 8002962:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8002964:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002966:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002968:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800296c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8002970:	2a01      	cmp	r2, #1
 8002972:	f004 050f 	and.w	r5, r4, #15
 8002976:	d11b      	bne.n	80029b0 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002978:	40aa      	lsls	r2, r5
 800297a:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800297c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002980:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002982:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002986:	041a      	lsls	r2, r3, #16
 8002988:	d410      	bmi.n	80029ac <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800298a:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800298c:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800298e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80029a2:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80029ac:	2000      	movs	r0, #0
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80029b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b4:	40aa      	lsls	r2, r5
 80029b6:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80029b8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80029bc:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80029be:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	d4f2      	bmi.n	80029ac <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80029c6:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80029c8:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80029ca:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80029ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029da:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80029e4:	e7e2      	b.n	80029ac <USB_ActivateEndpoint+0x4a>
	...

080029e8 <USB_DeactivateEndpoint>:
{
 80029e8:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80029ea:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80029ec:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80029ee:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80029f2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f004 050f 	and.w	r5, r4, #15
 80029fc:	d110      	bne.n	8002a20 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80029fe:	40ab      	lsls	r3, r5
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4019      	ands	r1, r3
 8002a04:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002a06:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002a08:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002a10:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <USB_DeactivateEndpoint+0x5c>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a24:	40ab      	lsls	r3, r5
 8002a26:	43db      	mvns	r3, r3
 8002a28:	4019      	ands	r1, r3
 8002a2a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002a2c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002a2e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002a32:	400b      	ands	r3, r1
 8002a34:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002a36:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002a3a:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <USB_DeactivateEndpoint+0x60>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002a42:	e7eb      	b.n	8002a1c <USB_DeactivateEndpoint+0x34>
 8002a44:	ec337800 	.word	0xec337800
 8002a48:	eff37800 	.word	0xeff37800

08002a4c <USB_EP0StartXfer>:
{
 8002a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002a4e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002a50:	780c      	ldrb	r4, [r1, #0]
 8002a52:	694e      	ldr	r6, [r1, #20]
 8002a54:	4f41      	ldr	r7, [pc, #260]	; (8002b5c <USB_EP0StartXfer+0x110>)
  if (ep->is_in == 1U)
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f04f 0320 	mov.w	r3, #32
 8002a5c:	d159      	bne.n	8002b12 <USB_EP0StartXfer+0xc6>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002a5e:	fb13 0304 	smlabb	r3, r3, r4, r0
    if (ep->xfer_len == 0U)
 8002a62:	bb36      	cbnz	r6, 8002ab2 <USB_EP0StartXfer+0x66>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002a64:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002a68:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002a6c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002a70:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002a74:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002a78:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002a7c:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002a80:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8002a84:	402f      	ands	r7, r5
 8002a86:	f8c3 7910 	str.w	r7, [r3, #2320]	; 0x910
    if (dma == 1U)
 8002a8a:	2a01      	cmp	r2, #1
 8002a8c:	f04f 0320 	mov.w	r3, #32
 8002a90:	d129      	bne.n	8002ae6 <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8002a92:	690a      	ldr	r2, [r1, #16]
 8002a94:	b11a      	cbz	r2, 8002a9e <USB_EP0StartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002a96:	fb13 0304 	smlabb	r3, r3, r4, r0
 8002a9a:	f8c3 2914 	str.w	r2, [r3, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002a9e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002aa2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002aa6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002aaa:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8002aae:	2000      	movs	r0, #0
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab6:	691d      	ldr	r5, [r3, #16]
 8002ab8:	402f      	ands	r7, r5
 8002aba:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002abc:	691d      	ldr	r5, [r3, #16]
 8002abe:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002ac2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002ac6:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002ac8:	688d      	ldr	r5, [r1, #8]
 8002aca:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8002acc:	bf88      	it	hi
 8002ace:	614d      	strhi	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ad0:	691d      	ldr	r5, [r3, #16]
 8002ad2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002ad6:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002ad8:	694d      	ldr	r5, [r1, #20]
 8002ada:	691e      	ldr	r6, [r3, #16]
 8002adc:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002ae0:	4335      	orrs	r5, r6
 8002ae2:	611d      	str	r5, [r3, #16]
 8002ae4:	e7d1      	b.n	8002a8a <USB_EP0StartXfer+0x3e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002ae6:	fb13 0404 	smlabb	r4, r3, r4, r0
 8002aea:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002af2:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002af6:	694b      	ldr	r3, [r1, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0d8      	beq.n	8002aae <USB_EP0StartXfer+0x62>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002afc:	780a      	ldrb	r2, [r1, #0]
 8002afe:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8002b02:	f002 010f 	and.w	r1, r2, #15
 8002b06:	2201      	movs	r2, #1
 8002b08:	408a      	lsls	r2, r1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002b10:	e7cd      	b.n	8002aae <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b12:	fb13 0004 	smlabb	r0, r3, r4, r0
 8002b16:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002b1a:	691c      	ldr	r4, [r3, #16]
 8002b1c:	4027      	ands	r7, r4
 8002b1e:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002b20:	691c      	ldr	r4, [r3, #16]
 8002b22:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002b26:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002b2a:	611c      	str	r4, [r3, #16]
 8002b2c:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8002b2e:	b106      	cbz	r6, 8002b32 <USB_EP0StartXfer+0xe6>
      ep->xfer_len = ep->maxpacket;
 8002b30:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002b32:	691d      	ldr	r5, [r3, #16]
 8002b34:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002b38:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002b3a:	691d      	ldr	r5, [r3, #16]
 8002b3c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002b40:	432c      	orrs	r4, r5
    if (dma == 1U)
 8002b42:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002b44:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002b46:	d102      	bne.n	8002b4e <USB_EP0StartXfer+0x102>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002b48:	68ca      	ldr	r2, [r1, #12]
 8002b4a:	b102      	cbz	r2, 8002b4e <USB_EP0StartXfer+0x102>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002b4c:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002b4e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002b56:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002b5a:	e7a8      	b.n	8002aae <USB_EP0StartXfer+0x62>
 8002b5c:	fff80000 	.word	0xfff80000

08002b60 <USB_WritePacket>:
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002b66:	b94c      	cbnz	r4, 8002b7c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002b68:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002b6a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002b76:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002b78:	4299      	cmp	r1, r3
 8002b7a:	d101      	bne.n	8002b80 <USB_WritePacket+0x20>
}
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002b80:	f851 2b04 	ldr.w	r2, [r1], #4
 8002b84:	6002      	str	r2, [r0, #0]
 8002b86:	e7f7      	b.n	8002b78 <USB_WritePacket+0x18>

08002b88 <USB_EPStartXfer>:
{
 8002b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8002b8a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002b8c:	780e      	ldrb	r6, [r1, #0]
 8002b8e:	4f73      	ldr	r7, [pc, #460]	; (8002d5c <USB_EPStartXfer+0x1d4>)
  if (ep->is_in == 1U)
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f04f 0420 	mov.w	r4, #32
 8002b96:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b98:	fb14 0406 	smlabb	r4, r4, r6, r0
  if (ep->is_in == 1U)
 8002b9c:	f040 8098 	bne.w	8002cd0 <USB_EPStartXfer+0x148>
    if (ep->xfer_len == 0U)
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d138      	bne.n	8002c16 <USB_EPStartXfer+0x8e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ba4:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8002ba8:	f8d4 4910 	ldr.w	r4, [r4, #2320]	; 0x910
 8002bac:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002bb0:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002bb4:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002bb6:	692c      	ldr	r4, [r5, #16]
 8002bb8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002bbc:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002bbe:	692c      	ldr	r4, [r5, #16]
 8002bc0:	4027      	ands	r7, r4
 8002bc2:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8002bc4:	2a01      	cmp	r2, #1
 8002bc6:	f04f 0420 	mov.w	r4, #32
 8002bca:	d154      	bne.n	8002c76 <USB_EPStartXfer+0xee>
      if ((uint32_t)ep->dma_addr != 0U)
 8002bcc:	690b      	ldr	r3, [r1, #16]
 8002bce:	b11b      	cbz	r3, 8002bd8 <USB_EPStartXfer+0x50>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002bd0:	fb14 0406 	smlabb	r4, r4, r6, r0
 8002bd4:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8002bd8:	78cb      	ldrb	r3, [r1, #3]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d110      	bne.n	8002c00 <USB_EPStartXfer+0x78>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002bde:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002be2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002be6:	f04f 0320 	mov.w	r3, #32
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002bea:	fb13 0306 	smlabb	r3, r3, r6, r0
 8002bee:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002bf2:	bf0c      	ite	eq
 8002bf4:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002bf8:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8002bfc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002c00:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8002c04:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002c0c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002c10:	2000      	movs	r0, #0
 8002c12:	b003      	add	sp, #12
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c16:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002c1a:	402f      	ands	r7, r5
 8002c1c:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c20:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002c24:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c26:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002c2a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002c2e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002c32:	19dd      	adds	r5, r3, r7
 8002c34:	3d01      	subs	r5, #1
 8002c36:	fbb5 f7f7 	udiv	r7, r5, r7
 8002c3a:	4d49      	ldr	r5, [pc, #292]	; (8002d60 <USB_EPStartXfer+0x1d8>)
 8002c3c:	f8d4 e910 	ldr.w	lr, [r4, #2320]	; 0x910
 8002c40:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8002c44:	ea45 050e 	orr.w	r5, r5, lr
 8002c48:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002c4c:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8002c50:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8002c54:	433d      	orrs	r5, r7
 8002c56:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8002c5a:	78cd      	ldrb	r5, [r1, #3]
 8002c5c:	2d01      	cmp	r5, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c5e:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8002c62:	d1af      	bne.n	8002bc4 <USB_EPStartXfer+0x3c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002c64:	6925      	ldr	r5, [r4, #16]
 8002c66:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8002c6a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002c6c:	6925      	ldr	r5, [r4, #16]
 8002c6e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002c72:	6125      	str	r5, [r4, #16]
 8002c74:	e7a6      	b.n	8002bc4 <USB_EPStartXfer+0x3c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002c76:	fb14 0406 	smlabb	r4, r4, r6, r0
 8002c7a:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002c7e:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002c82:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002c86:	78cd      	ldrb	r5, [r1, #3]
 8002c88:	2d01      	cmp	r5, #1
 8002c8a:	d00c      	beq.n	8002ca6 <USB_EPStartXfer+0x11e>
        if (ep->xfer_len > 0U)
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0bf      	beq.n	8002c10 <USB_EPStartXfer+0x88>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002c90:	780b      	ldrb	r3, [r1, #0]
 8002c92:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002ca4:	e7b4      	b.n	8002c10 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002ca6:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8002caa:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002cae:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002cb2:	bf0c      	ite	eq
 8002cb4:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002cb8:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002cbc:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002cc0:	780c      	ldrb	r4, [r1, #0]
 8002cc2:	9200      	str	r2, [sp, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	68c9      	ldr	r1, [r1, #12]
 8002cca:	f7ff ff49 	bl	8002b60 <USB_WritePacket>
 8002cce:	e79f      	b.n	8002c10 <USB_EPStartXfer+0x88>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cd0:	f504 6630 	add.w	r6, r4, #2816	; 0xb00
 8002cd4:	6935      	ldr	r5, [r6, #16]
 8002cd6:	402f      	ands	r7, r5
 8002cd8:	6137      	str	r7, [r6, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002cda:	6935      	ldr	r5, [r6, #16]
 8002cdc:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002ce0:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002ce4:	6135      	str	r5, [r6, #16]
 8002ce6:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8002ce8:	bb23      	cbnz	r3, 8002d34 <USB_EPStartXfer+0x1ac>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002cea:	6933      	ldr	r3, [r6, #16]
 8002cec:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002cf0:	431d      	orrs	r5, r3
 8002cf2:	6135      	str	r5, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002cf4:	6933      	ldr	r3, [r6, #16]
 8002cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 8002cfa:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002cfc:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8002cfe:	d102      	bne.n	8002d06 <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002d00:	68cb      	ldr	r3, [r1, #12]
 8002d02:	b103      	cbz	r3, 8002d06 <USB_EPStartXfer+0x17e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002d04:	6173      	str	r3, [r6, #20]
    if (ep->type == EP_TYPE_ISOC)
 8002d06:	78cb      	ldrb	r3, [r1, #3]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10c      	bne.n	8002d26 <USB_EPStartXfer+0x19e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002d0c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002d10:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002d14:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002d18:	bf0c      	ite	eq
 8002d1a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002d1e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002d22:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002d26:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d2e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8002d32:	e76d      	b.n	8002c10 <USB_EPStartXfer+0x88>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002d34:	4f0a      	ldr	r7, [pc, #40]	; (8002d60 <USB_EPStartXfer+0x1d8>)
 8002d36:	f8d6 e010 	ldr.w	lr, [r6, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002d3a:	442b      	add	r3, r5
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002d42:	ea07 47c3 	and.w	r7, r7, r3, lsl #19
 8002d46:	ea47 070e 	orr.w	r7, r7, lr
 8002d4a:	6137      	str	r7, [r6, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	6937      	ldr	r7, [r6, #16]
 8002d50:	436b      	muls	r3, r5
 8002d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d56:	433b      	orrs	r3, r7
 8002d58:	e7cf      	b.n	8002cfa <USB_EPStartXfer+0x172>
 8002d5a:	bf00      	nop
 8002d5c:	fff80000 	.word	0xfff80000
 8002d60:	1ff80000 	.word	0x1ff80000

08002d64 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002d64:	3203      	adds	r2, #3
 8002d66:	f022 0203 	bic.w	r2, r2, #3
 8002d6a:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002d6c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002d70:	4291      	cmp	r1, r2
 8002d72:	d101      	bne.n	8002d78 <USB_ReadPacket+0x14>
}
 8002d74:	4608      	mov	r0, r1
 8002d76:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	f841 3b04 	str.w	r3, [r1], #4
 8002d7e:	e7f7      	b.n	8002d70 <USB_ReadPacket+0xc>

08002d80 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002d80:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002d82:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002d8a:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8002d8e:	d112      	bne.n	8002db6 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002d90:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db06      	blt.n	8002da6 <USB_EPSetStall+0x26>
 8002d98:	b12a      	cbz	r2, 8002da6 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002d9a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002da2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002da6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002db2:	2000      	movs	r0, #0
 8002db4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002db6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db06      	blt.n	8002dcc <USB_EPSetStall+0x4c>
 8002dbe:	b12a      	cbz	r2, 8002dcc <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002dc0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002dc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dc8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002dcc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002dd8:	e7eb      	b.n	8002db2 <USB_EPSetStall+0x32>

08002dda <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8002dda:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002ddc:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002de4:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8002de8:	d111      	bne.n	8002e0e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002df2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002df6:	78cb      	ldrb	r3, [r1, #3]
 8002df8:	3b02      	subs	r3, #2
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d805      	bhi.n	8002e0a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002dfe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e06:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e0e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e16:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002e1a:	78cb      	ldrb	r3, [r1, #3]
 8002e1c:	3b02      	subs	r3, #2
 8002e1e:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002e20:	bf9e      	ittt	ls
 8002e22:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8002e26:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8002e2e:	e7ec      	b.n	8002e0a <USB_EPClearStall+0x30>

08002e30 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002e30:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e38:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002e3c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e40:	0109      	lsls	r1, r1, #4
 8002e42:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002e46:	4319      	orrs	r1, r3
 8002e48:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr

08002e50 <USB_DevConnect>:
{
 8002e50:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002e52:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002e56:	f023 0302 	bic.w	r3, r3, #2
 8002e5a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002e5e:	2003      	movs	r0, #3
 8002e60:	f7fe f97e 	bl	8001160 <HAL_Delay>
}
 8002e64:	2000      	movs	r0, #0
 8002e66:	bd08      	pop	{r3, pc}

08002e68 <USB_DevDisconnect>:
{
 8002e68:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e6a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002e76:	2003      	movs	r0, #3
 8002e78:	f7fe f972 	bl	8001160 <HAL_Delay>
}
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	bd08      	pop	{r3, pc}

08002e80 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002e80:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002e82:	6980      	ldr	r0, [r0, #24]
}
 8002e84:	4010      	ands	r0, r2
 8002e86:	4770      	bx	lr

08002e88 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002e88:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002e8c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002e90:	69c0      	ldr	r0, [r0, #28]
 8002e92:	4018      	ands	r0, r3
}
 8002e94:	0c00      	lsrs	r0, r0, #16
 8002e96:	4770      	bx	lr

08002e98 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002e98:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002e9c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ea0:	69c0      	ldr	r0, [r0, #28]
 8002ea2:	4018      	ands	r0, r3
}
 8002ea4:	b280      	uxth	r0, r0
 8002ea6:	4770      	bx	lr

08002ea8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002ea8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002eac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002eb0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002eb4:	6940      	ldr	r0, [r0, #20]
}
 8002eb6:	4010      	ands	r0, r2
 8002eb8:	4770      	bx	lr

08002eba <USB_ReadDevInEPInterrupt>:
{
 8002eba:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8002ebc:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002ec0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002ec4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002ec8:	f001 010f 	and.w	r1, r1, #15
 8002ecc:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002ece:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002ed2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002ed4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4323      	orrs	r3, r4
}
 8002eda:	4018      	ands	r0, r3
 8002edc:	bd10      	pop	{r4, pc}

08002ede <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002ede:	6940      	ldr	r0, [r0, #20]
}
 8002ee0:	f000 0001 	and.w	r0, r0, #1
 8002ee4:	4770      	bx	lr

08002ee6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002ee6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002eea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002eee:	f023 0307 	bic.w	r3, r3, #7
 8002ef2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002ef6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	f002 0206 	and.w	r2, r2, #6
 8002f00:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8002f02:	bf02      	ittt	eq
 8002f04:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8002f08:	f042 0203 	orreq.w	r2, r2, #3
 8002f0c:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f16:	605a      	str	r2, [r3, #4]
}
 8002f18:	2000      	movs	r0, #0
 8002f1a:	4770      	bx	lr

08002f1c <USB_EP0_OutStart>:
{
 8002f1c:	b510      	push	{r4, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <USB_EP0_OutStart+0x5c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f20:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	d903      	bls.n	8002f2e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f26:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db21      	blt.n	8002f72 <USB_EP0_OutStart+0x56>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002f2e:	2400      	movs	r4, #0
 8002f30:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002f34:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002f38:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002f3c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002f40:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002f44:	f044 0418 	orr.w	r4, r4, #24
 8002f48:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002f4c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002f50:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002f52:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002f56:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002f5a:	bf08      	it	eq
 8002f5c:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002f60:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002f64:	bf02      	ittt	eq
 8002f66:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 8002f6a:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 8002f6e:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 8002f72:	2000      	movs	r0, #0
 8002f74:	bd10      	pop	{r4, pc}
 8002f76:	bf00      	nop
 8002f78:	4f54300a 	.word	0x4f54300a

08002f7c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002f7c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
{
 8002f80:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f82:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002f86:	b15b      	cbz	r3, 8002fa0 <USBD_CDC_EP0_RxReady+0x24>
 8002f88:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002f8c:	28ff      	cmp	r0, #255	; 0xff
 8002f8e:	d007      	beq.n	8002fa0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002f96:	4621      	mov	r1, r4
 8002f98:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8002f9a:	23ff      	movs	r3, #255	; 0xff
 8002f9c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002fa4:	2343      	movs	r3, #67	; 0x43
 8002fa6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002fa8:	4800      	ldr	r0, [pc, #0]	; (8002fac <USBD_CDC_GetFSCfgDesc+0x8>)
 8002faa:	4770      	bx	lr
 8002fac:	200000a4 	.word	0x200000a4

08002fb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002fb0:	2343      	movs	r3, #67	; 0x43
 8002fb2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002fb4:	4800      	ldr	r0, [pc, #0]	; (8002fb8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002fb6:	4770      	bx	lr
 8002fb8:	200000e8 	.word	0x200000e8

08002fbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002fbc:	2343      	movs	r3, #67	; 0x43
 8002fbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002fc0:	4800      	ldr	r0, [pc, #0]	; (8002fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002fc2:	4770      	bx	lr
 8002fc4:	20000138 	.word	0x20000138

08002fc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002fc8:	230a      	movs	r3, #10
 8002fca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002fcc:	4800      	ldr	r0, [pc, #0]	; (8002fd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002fce:	4770      	bx	lr
 8002fd0:	2000012c 	.word	0x2000012c

08002fd4 <USBD_CDC_DataOut>:
{
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fd8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002fdc:	f7fd ffce 	bl	8000f7c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002fe0:	f8d5 3290 	ldr.w	r3, [r5, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002fe4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002fe8:	b14b      	cbz	r3, 8002ffe <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002fea:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 8002fee:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002ff8:	4798      	blx	r3
    return USBD_OK;
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002ffe:	2002      	movs	r0, #2
}
 8003000:	bd38      	pop	{r3, r4, r5, pc}

08003002 <USBD_CDC_DataIn>:
{
 8003002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8003004:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8003008:	b1d6      	cbz	r6, 8003040 <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800300a:	2314      	movs	r3, #20
 800300c:	fb03 0301 	mla	r3, r3, r1, r0
 8003010:	69dd      	ldr	r5, [r3, #28]
 8003012:	b18d      	cbz	r5, 8003038 <USBD_CDC_DataIn+0x36>
 8003014:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8003018:	271c      	movs	r7, #28
 800301a:	fb07 4201 	mla	r2, r7, r1, r4
 800301e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003020:	fbb5 f4f2 	udiv	r4, r5, r2
 8003024:	fb02 5414 	mls	r4, r2, r4, r5
 8003028:	b934      	cbnz	r4, 8003038 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800302a:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800302c:	4622      	mov	r2, r4
 800302e:	4623      	mov	r3, r4
 8003030:	f7fd ff88 	bl	8000f44 <USBD_LL_Transmit>
    return USBD_OK;
 8003034:	4620      	mov	r0, r4
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003038:	2000      	movs	r0, #0
 800303a:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800303e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8003040:	2002      	movs	r0, #2
}
 8003042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003044 <USBD_CDC_Setup>:
{
 8003044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003048:	780a      	ldrb	r2, [r1, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800304a:	f8d0 7290 	ldr.w	r7, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800304e:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003052:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003056:	4605      	mov	r5, r0
 8003058:	460e      	mov	r6, r1
  uint8_t ifalt = 0U;
 800305a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800305e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003062:	d028      	beq.n	80030b6 <USBD_CDC_Setup+0x72>
 8003064:	2c20      	cmp	r4, #32
 8003066:	d147      	bne.n	80030f8 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 8003068:	88cc      	ldrh	r4, [r1, #6]
 800306a:	784b      	ldrb	r3, [r1, #1]
 800306c:	b1e4      	cbz	r4, 80030a8 <USBD_CDC_Setup+0x64>
      if (req->bmRequest & 0x80U)
 800306e:	0612      	lsls	r2, r2, #24
 8003070:	d511      	bpl.n	8003096 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003072:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003076:	4639      	mov	r1, r7
 8003078:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	4622      	mov	r2, r4
 8003080:	47c8      	blx	r9
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003082:	88f2      	ldrh	r2, [r6, #6]
 8003084:	4639      	mov	r1, r7
 8003086:	4628      	mov	r0, r5
 8003088:	f000 fc4a 	bl	8003920 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800308c:	4644      	mov	r4, r8
}
 800308e:	4620      	mov	r0, r4
 8003090:	b003      	add	sp, #12
 8003092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hcdc->CmdOpCode = req->bRequest;
 8003096:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800309a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800309e:	4622      	mov	r2, r4
 80030a0:	4639      	mov	r1, r7
 80030a2:	f000 fc52 	bl	800394a <USBD_CtlPrepareRx>
 80030a6:	e7f1      	b.n	800308c <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80030a8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80030ac:	4618      	mov	r0, r3
 80030ae:	6895      	ldr	r5, [r2, #8]
 80030b0:	4622      	mov	r2, r4
 80030b2:	47a8      	blx	r5
 80030b4:	e7eb      	b.n	800308e <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 80030b6:	784f      	ldrb	r7, [r1, #1]
 80030b8:	2f0a      	cmp	r7, #10
 80030ba:	d00d      	beq.n	80030d8 <USBD_CDC_Setup+0x94>
 80030bc:	2f0b      	cmp	r7, #11
 80030be:	d015      	beq.n	80030ec <USBD_CDC_Setup+0xa8>
 80030c0:	b9d7      	cbnz	r7, 80030f8 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030c2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d114      	bne.n	80030f4 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80030ca:	2202      	movs	r2, #2
 80030cc:	f10d 0106 	add.w	r1, sp, #6
 80030d0:	f000 fc26 	bl	8003920 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80030d4:	463c      	mov	r4, r7
 80030d6:	e7da      	b.n	800308e <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030d8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d109      	bne.n	80030f4 <USBD_CDC_Setup+0xb0>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80030e0:	2201      	movs	r2, #1
 80030e2:	f10d 0105 	add.w	r1, sp, #5
 80030e6:	f000 fc1b 	bl	8003920 <USBD_CtlSendData>
 80030ea:	e7d0      	b.n	800308e <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80030ec:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d0cc      	beq.n	800308e <USBD_CDC_Setup+0x4a>
        USBD_CtlError (pdev, req);
 80030f4:	4631      	mov	r1, r6
 80030f6:	4628      	mov	r0, r5
    USBD_CtlError (pdev, req);
 80030f8:	f000 fbeb 	bl	80038d2 <USBD_CtlError>
    ret = USBD_FAIL;
 80030fc:	2402      	movs	r4, #2
    break;
 80030fe:	e7c6      	b.n	800308e <USBD_CDC_Setup+0x4a>

08003100 <USBD_CDC_DeInit>:
{
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003104:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003106:	2181      	movs	r1, #129	; 0x81
 8003108:	f7fd fed0 	bl	8000eac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800310c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800310e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003110:	4620      	mov	r0, r4
 8003112:	f7fd fecb 	bl	8000eac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003116:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800311a:	2182      	movs	r1, #130	; 0x82
 800311c:	4620      	mov	r0, r4
 800311e:	f7fd fec5 	bl	8000eac <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003122:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003126:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8003128:	b14b      	cbz	r3, 800313e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800312a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003132:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8003136:	f000 fc67 	bl	8003a08 <free>
    pdev->pClassData = NULL;
 800313a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800313e:	2000      	movs	r0, #0
 8003140:	bd38      	pop	{r3, r4, r5, pc}

08003142 <USBD_CDC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003142:	7c03      	ldrb	r3, [r0, #16]
{
 8003144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003148:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800314a:	bbcb      	cbnz	r3, 80031c0 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800314c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003150:	2202      	movs	r2, #2
 8003152:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003154:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003156:	f7fd fe99 	bl	8000e8c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800315a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800315c:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003160:	4629      	mov	r1, r5
 8003162:	2202      	movs	r2, #2
 8003164:	4620      	mov	r0, r4
 8003166:	f7fd fe91 	bl	8000e8c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800316a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800316e:	2308      	movs	r3, #8
 8003170:	2203      	movs	r2, #3
 8003172:	2182      	movs	r1, #130	; 0x82
 8003174:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003176:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003178:	f7fd fe88 	bl	8000e8c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800317c:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800317e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003182:	f000 fc39 	bl	80039f8 <malloc>
 8003186:	4606      	mov	r6, r0
 8003188:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800318c:	b358      	cbz	r0, 80031e6 <USBD_CDC_Init+0xa4>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800318e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003196:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800319a:	2700      	movs	r7, #0
 800319c:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 80031a0:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80031a4:	f1b8 0f00 	cmp.w	r8, #0
 80031a8:	d113      	bne.n	80031d2 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ae:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80031b2:	4629      	mov	r1, r5
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7fd fed3 	bl	8000f60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80031ba:	4640      	mov	r0, r8
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	2202      	movs	r2, #2
 80031c4:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031c6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80031c8:	f7fd fe60 	bl	8000e8c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031cc:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	e7c6      	b.n	8003160 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80031d8:	4629      	mov	r1, r5
 80031da:	4620      	mov	r0, r4
 80031dc:	f7fd fec0 	bl	8000f60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80031e0:	4638      	mov	r0, r7
 80031e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80031e6:	4628      	mov	r0, r5
}
 80031e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031ec <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80031ec:	b119      	cbz	r1, 80031f6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80031ee:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80031f2:	2000      	movs	r0, #0
 80031f4:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80031f6:	2002      	movs	r0, #2
  }

  return ret;
}
 80031f8:	4770      	bx	lr

080031fa <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031fa:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80031fe:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003200:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003204:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003208:	4770      	bx	lr

0800320a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800320a:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 800320e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003210:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003214:	4770      	bx	lr

08003216 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003216:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800321a:	b510      	push	{r4, lr}

  if(pdev->pClassData != NULL)
 800321c:	b182      	cbz	r2, 8003240 <USBD_CDC_TransmitPacket+0x2a>
  {
    if(hcdc->TxState == 0U)
 800321e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003222:	2301      	movs	r3, #1
 8003224:	b974      	cbnz	r4, 8003244 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8003226:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800322a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800322e:	6303      	str	r3, [r0, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003230:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003234:	b29b      	uxth	r3, r3
 8003236:	2181      	movs	r1, #129	; 0x81
 8003238:	f7fd fe84 	bl	8000f44 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800323c:	4620      	mov	r0, r4
 800323e:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003240:	2002      	movs	r0, #2
 8003242:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8003244:	4618      	mov	r0, r3
  }
}
 8003246:	bd10      	pop	{r4, pc}

08003248 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003248:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800324c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800324e:	b162      	cbz	r2, 800326a <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003250:	7c04      	ldrb	r4, [r0, #16]
 8003252:	b944      	cbnz	r4, 8003266 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003254:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003258:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800325c:	2101      	movs	r1, #1
 800325e:	f7fd fe7f 	bl	8000f60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003262:	2000      	movs	r0, #0
 8003264:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003266:	2340      	movs	r3, #64	; 0x40
 8003268:	e7f6      	b.n	8003258 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800326a:	2002      	movs	r0, #2
  }
}
 800326c:	bd10      	pop	{r4, pc}

0800326e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800326e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003270:	b180      	cbz	r0, 8003294 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003272:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003276:	b113      	cbz	r3, 800327e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800327e:	b109      	cbz	r1, 8003284 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003280:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003284:	2301      	movs	r3, #1
 8003286:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 800328a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800328c:	f7fd fdc2 	bl	8000e14 <USBD_LL_Init>

  return USBD_OK;
 8003290:	2000      	movs	r0, #0
 8003292:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003294:	2002      	movs	r0, #2
}
 8003296:	bd08      	pop	{r3, pc}

08003298 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003298:	b119      	cbz	r1, 80032a2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800329a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 800329e:	2000      	movs	r0, #0
 80032a0:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80032a2:	2002      	movs	r0, #2
  }

  return status;
}
 80032a4:	4770      	bx	lr

080032a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80032a6:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80032a8:	f7fd fde2 	bl	8000e70 <USBD_LL_Start>

  return USBD_OK;
}
 80032ac:	2000      	movs	r0, #0
 80032ae:	bd08      	pop	{r3, pc}

080032b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80032b0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80032b2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80032b6:	b90b      	cbnz	r3, 80032bc <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80032b8:	2002      	movs	r0, #2
 80032ba:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4798      	blx	r3
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d1f9      	bne.n	80032b8 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80032c4:	bd08      	pop	{r3, pc}

080032c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80032c6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80032c8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4798      	blx	r3
  return USBD_OK;
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	bd08      	pop	{r3, pc}

080032d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80032d8:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 fae4 	bl	80038aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80032e2:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80032e4:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 80032e8:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 80032ec:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80032f0:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 80032f4:	f001 031f 	and.w	r3, r1, #31
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d00e      	beq.n	800331a <USBD_LL_SetupStage+0x46>
 80032fc:	d307      	bcc.n	800330e <USBD_LL_SetupStage+0x3a>
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d010      	beq.n	8003324 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003302:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003306:	4620      	mov	r0, r4
 8003308:	f7fd fdde 	bl	8000ec8 <USBD_LL_StallEP>
    break;
 800330c:	e003      	b.n	8003316 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800330e:	4629      	mov	r1, r5
 8003310:	4620      	mov	r0, r4
 8003312:	f000 f903 	bl	800351c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003316:	2000      	movs	r0, #0
 8003318:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800331a:	4629      	mov	r1, r5
 800331c:	4620      	mov	r0, r4
 800331e:	f000 fa17 	bl	8003750 <USBD_StdItfReq>
    break;
 8003322:	e7f8      	b.n	8003316 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8003324:	4629      	mov	r1, r5
 8003326:	4620      	mov	r0, r4
 8003328:	f000 fa37 	bl	800379a <USBD_StdEPReq>
    break;
 800332c:	e7f3      	b.n	8003316 <USBD_LL_SetupStage+0x42>

0800332e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800332e:	b570      	push	{r4, r5, r6, lr}
 8003330:	4605      	mov	r5, r0
 8003332:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8003334:	bb49      	cbnz	r1, 800338a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003336:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800333a:	2b03      	cmp	r3, #3
 800333c:	d11e      	bne.n	800337c <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800333e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8003342:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003346:	4293      	cmp	r3, r2
 8003348:	d90b      	bls.n	8003362 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800334a:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 800334c:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800334e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8003352:	bf8c      	ite	hi
 8003354:	b29a      	uxthhi	r2, r3
 8003356:	b292      	uxthls	r2, r2
 8003358:	4631      	mov	r1, r6
 800335a:	f000 fb05 	bl	8003968 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800335e:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003360:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003362:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	b123      	cbz	r3, 8003374 <USBD_LL_DataOutStage+0x46>
 800336a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800336e:	2a03      	cmp	r2, #3
 8003370:	d100      	bne.n	8003374 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003372:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003374:	4628      	mov	r0, r5
 8003376:	f000 faff 	bl	8003978 <USBD_CtlSendStatus>
 800337a:	e7f0      	b.n	800335e <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800337c:	2b05      	cmp	r3, #5
 800337e:	d1ee      	bne.n	800335e <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003380:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8003384:	f7fd fda0 	bl	8000ec8 <USBD_LL_StallEP>
 8003388:	e7e9      	b.n	800335e <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 800338a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	b12b      	cbz	r3, 800339e <USBD_LL_DataOutStage+0x70>
 8003392:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003396:	2a03      	cmp	r2, #3
 8003398:	d101      	bne.n	800339e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800339a:	4798      	blx	r3
 800339c:	e7df      	b.n	800335e <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800339e:	2002      	movs	r0, #2
}
 80033a0:	bd70      	pop	{r4, r5, r6, pc}

080033a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80033a2:	b570      	push	{r4, r5, r6, lr}
 80033a4:	4613      	mov	r3, r2
 80033a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80033a8:	460e      	mov	r6, r1
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d148      	bne.n	8003440 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80033ae:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80033b2:	2a02      	cmp	r2, #2
 80033b4:	d13d      	bne.n	8003432 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80033b6:	6a05      	ldr	r5, [r0, #32]
 80033b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80033ba:	4295      	cmp	r5, r2
 80033bc:	d914      	bls.n	80033e8 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80033be:	1aaa      	subs	r2, r5, r2
 80033c0:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80033c2:	4619      	mov	r1, r3
 80033c4:	b292      	uxth	r2, r2
 80033c6:	f000 fab8 	bl	800393a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80033ca:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80033cc:	461a      	mov	r2, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7fd fdc5 	bl	8000f60 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80033d6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80033da:	2b01      	cmp	r3, #1
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	d13a      	bne.n	8003458 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80033e2:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 80033e8:	69c3      	ldr	r3, [r0, #28]
 80033ea:	fbb3 f5f2 	udiv	r5, r3, r2
 80033ee:	fb02 3515 	mls	r5, r2, r5, r3
 80033f2:	b965      	cbnz	r5, 800340e <USBD_LL_DataInStage+0x6c>
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d80a      	bhi.n	800340e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80033f8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d206      	bcs.n	800340e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003400:	462a      	mov	r2, r5
 8003402:	f000 fa9a 	bl	800393a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003406:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800340a:	462b      	mov	r3, r5
 800340c:	e7de      	b.n	80033cc <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800340e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	b12b      	cbz	r3, 8003422 <USBD_LL_DataInStage+0x80>
 8003416:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800341a:	2a03      	cmp	r2, #3
 800341c:	d101      	bne.n	8003422 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800341e:	4620      	mov	r0, r4
 8003420:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	4620      	mov	r0, r4
 8003426:	f7fd fd4f 	bl	8000ec8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800342a:	4620      	mov	r0, r4
 800342c:	f000 faaf 	bl	800398e <USBD_CtlReceiveStatus>
 8003430:	e7d1      	b.n	80033d6 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003432:	f032 0304 	bics.w	r3, r2, #4
 8003436:	d1ce      	bne.n	80033d6 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	f7fd fd45 	bl	8000ec8 <USBD_LL_StallEP>
 800343e:	e7ca      	b.n	80033d6 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8003440:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	b133      	cbz	r3, 8003456 <USBD_LL_DataInStage+0xb4>
 8003448:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800344c:	2a03      	cmp	r2, #3
 800344e:	d102      	bne.n	8003456 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003450:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003452:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003454:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003456:	2002      	movs	r0, #2
}
 8003458:	bd70      	pop	{r4, r5, r6, pc}

0800345a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800345a:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800345c:	2200      	movs	r2, #0
{
 800345e:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003460:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003462:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003464:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003466:	2340      	movs	r3, #64	; 0x40
 8003468:	f7fd fd10 	bl	8000e8c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800346c:	4633      	mov	r3, r6
 800346e:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003470:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003474:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003478:	2200      	movs	r2, #0
 800347a:	4620      	mov	r0, r4
 800347c:	f7fd fd06 	bl	8000e8c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003480:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003484:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003486:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003488:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800348a:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800348e:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8003492:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003494:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8003498:	b123      	cbz	r3, 80034a4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800349a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800349e:	4620      	mov	r0, r4
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80034a4:	2000      	movs	r0, #0
 80034a6:	bd70      	pop	{r4, r5, r6, pc}

080034a8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80034a8:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80034aa:	2000      	movs	r0, #0
 80034ac:	4770      	bx	lr

080034ae <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80034ae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80034b2:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80034b6:	2304      	movs	r3, #4
 80034b8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80034bc:	2000      	movs	r0, #0
 80034be:	4770      	bx	lr

080034c0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80034c0:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80034c4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80034c8:	2000      	movs	r0, #0
 80034ca:	4770      	bx	lr

080034cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80034cc:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80034ce:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80034d2:	2a03      	cmp	r2, #3
 80034d4:	d104      	bne.n	80034e0 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80034d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	b103      	cbz	r3, 80034e0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80034de:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80034e0:	2000      	movs	r0, #0
 80034e2:	bd08      	pop	{r3, pc}

080034e4 <USBD_LL_IsoINIncomplete>:
 80034e4:	2000      	movs	r0, #0
 80034e6:	4770      	bx	lr

080034e8 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80034e8:	2000      	movs	r0, #0
 80034ea:	4770      	bx	lr

080034ec <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80034ec:	2000      	movs	r0, #0
 80034ee:	4770      	bx	lr

080034f0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80034f0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80034f2:	2201      	movs	r2, #1
 80034f4:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80034f8:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 80034fc:	7901      	ldrb	r1, [r0, #4]
 80034fe:	6852      	ldr	r2, [r2, #4]
 8003500:	4790      	blx	r2

  return USBD_OK;
}
 8003502:	2000      	movs	r0, #0
 8003504:	bd08      	pop	{r3, pc}

08003506 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003506:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8003508:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800350a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800350c:	f7fd fcdc 	bl	8000ec8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003510:	4620      	mov	r0, r4
 8003512:	2100      	movs	r1, #0
}
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8003518:	f7fd bcd6 	b.w	8000ec8 <USBD_LL_StallEP>

0800351c <USBD_StdDevReq>:
{
 800351c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800351e:	780b      	ldrb	r3, [r1, #0]
 8003520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003524:	2b20      	cmp	r3, #32
{
 8003526:	4604      	mov	r4, r0
 8003528:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800352a:	d014      	beq.n	8003556 <USBD_StdDevReq+0x3a>
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d012      	beq.n	8003556 <USBD_StdDevReq+0x3a>
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 808d 	bne.w	8003650 <USBD_StdDevReq+0x134>
    switch (req->bRequest)
 8003536:	784b      	ldrb	r3, [r1, #1]
 8003538:	2b09      	cmp	r3, #9
 800353a:	f200 8088 	bhi.w	800364e <USBD_StdDevReq+0x132>
 800353e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003542:	00df      	.short	0x00df
 8003544:	008600f9 	.word	0x008600f9
 8003548:	008600f2 	.word	0x008600f2
 800354c:	0013007a 	.word	0x0013007a
 8003550:	00ca0086 	.word	0x00ca0086
 8003554:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 8003556:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800355a:	4629      	mov	r1, r5
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4620      	mov	r0, r4
 8003560:	4798      	blx	r3
}
 8003562:	2000      	movs	r0, #0
 8003564:	b003      	add	sp, #12
 8003566:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8003568:	884b      	ldrh	r3, [r1, #2]
 800356a:	0a1a      	lsrs	r2, r3, #8
 800356c:	3a01      	subs	r2, #1
 800356e:	2a06      	cmp	r2, #6
 8003570:	d86d      	bhi.n	800364e <USBD_StdDevReq+0x132>
 8003572:	e8df f002 	tbb	[pc, r2]
 8003576:	2004      	.short	0x2004
 8003578:	4d6c6c2d 	.word	0x4d6c6c2d
 800357c:	56          	.byte	0x56
 800357d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800357e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003582:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003584:	7c20      	ldrb	r0, [r4, #16]
 8003586:	f10d 0106 	add.w	r1, sp, #6
 800358a:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 800358c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003590:	b152      	cbz	r2, 80035a8 <USBD_StdDevReq+0x8c>
 8003592:	88eb      	ldrh	r3, [r5, #6]
 8003594:	b143      	cbz	r3, 80035a8 <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 8003596:	429a      	cmp	r2, r3
 8003598:	bf28      	it	cs
 800359a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800359c:	4601      	mov	r1, r0
 800359e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80035a0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80035a4:	f000 f9bc 	bl	8003920 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80035a8:	88eb      	ldrh	r3, [r5, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1d9      	bne.n	8003562 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80035ae:	4620      	mov	r0, r4
 80035b0:	f000 f9e2 	bl	8003978 <USBD_CtlSendStatus>
 80035b4:	e7d5      	b.n	8003562 <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80035b6:	7c02      	ldrb	r2, [r0, #16]
 80035b8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80035bc:	b932      	cbnz	r2, 80035cc <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80035c0:	f10d 0006 	add.w	r0, sp, #6
 80035c4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80035c6:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80035c8:	7043      	strb	r3, [r0, #1]
 80035ca:	e7df      	b.n	800358c <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	e7f7      	b.n	80035c0 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d83b      	bhi.n	800364e <USBD_StdDevReq+0x132>
 80035d6:	e8df f003 	tbb	[pc, r3]
 80035da:	0703      	.short	0x0703
 80035dc:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80035e0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	e7cd      	b.n	8003584 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80035e8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	e7c9      	b.n	8003584 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80035f0:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	e7c5      	b.n	8003584 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80035f8:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	e7c1      	b.n	8003584 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003600:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	e7bd      	b.n	8003584 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003608:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	e7b9      	b.n	8003584 <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003610:	7c03      	ldrb	r3, [r0, #16]
 8003612:	b9e3      	cbnz	r3, 800364e <USBD_StdDevReq+0x132>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003614:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003618:	f10d 0006 	add.w	r0, sp, #6
 800361c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361e:	4798      	blx	r3
 8003620:	e7b4      	b.n	800358c <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003622:	7c03      	ldrb	r3, [r0, #16]
 8003624:	b99b      	cbnz	r3, 800364e <USBD_StdDevReq+0x132>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003626:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800362a:	f10d 0006 	add.w	r0, sp, #6
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003632:	2307      	movs	r3, #7
 8003634:	e7c8      	b.n	80035c8 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003636:	888b      	ldrh	r3, [r1, #4]
 8003638:	b94b      	cbnz	r3, 800364e <USBD_StdDevReq+0x132>
 800363a:	88cb      	ldrh	r3, [r1, #6]
 800363c:	b93b      	cbnz	r3, 800364e <USBD_StdDevReq+0x132>
 800363e:	884d      	ldrh	r5, [r1, #2]
 8003640:	2d7f      	cmp	r5, #127	; 0x7f
 8003642:	d804      	bhi.n	800364e <USBD_StdDevReq+0x132>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003644:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003648:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800364a:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800364c:	d103      	bne.n	8003656 <USBD_StdDevReq+0x13a>
      USBD_CtlError(pdev, req);
 800364e:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003650:	f7ff ff59 	bl	8003506 <USBD_CtlError.constprop.1>
    break;
 8003654:	e785      	b.n	8003562 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 8003656:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800365a:	f7fd fc65 	bl	8000f28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800365e:	4620      	mov	r0, r4
 8003660:	f000 f98a 	bl	8003978 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003664:	b11d      	cbz	r5, 800366e <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003666:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003668:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800366c:	e779      	b.n	8003562 <USBD_StdDevReq+0x46>
 800366e:	2301      	movs	r3, #1
 8003670:	e7fa      	b.n	8003668 <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 8003672:	7889      	ldrb	r1, [r1, #2]
 8003674:	4d35      	ldr	r5, [pc, #212]	; (800374c <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003676:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003678:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800367a:	d8e8      	bhi.n	800364e <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 800367c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003680:	2b02      	cmp	r3, #2
 8003682:	d008      	beq.n	8003696 <USBD_StdDevReq+0x17a>
 8003684:	2b03      	cmp	r3, #3
 8003686:	d014      	beq.n	80036b2 <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 8003688:	f7ff ff3d 	bl	8003506 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800368c:	7829      	ldrb	r1, [r5, #0]
 800368e:	4620      	mov	r0, r4
 8003690:	f7ff fe19 	bl	80032c6 <USBD_ClrClassConfig>
 8003694:	e765      	b.n	8003562 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8003696:	2900      	cmp	r1, #0
 8003698:	d089      	beq.n	80035ae <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 800369a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800369c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800369e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80036a0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff fe03 	bl	80032b0 <USBD_SetClassConfig>
 80036aa:	2802      	cmp	r0, #2
 80036ac:	f47f af7f 	bne.w	80035ae <USBD_StdDevReq+0x92>
 80036b0:	e7cd      	b.n	800364e <USBD_StdDevReq+0x132>
      if (cfgidx == 0U)
 80036b2:	b931      	cbnz	r1, 80036c2 <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80036b4:	2302      	movs	r3, #2
 80036b6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80036ba:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80036bc:	f7ff fe03 	bl	80032c6 <USBD_ClrClassConfig>
 80036c0:	e775      	b.n	80035ae <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 80036c2:	6841      	ldr	r1, [r0, #4]
 80036c4:	2901      	cmp	r1, #1
 80036c6:	f43f af72 	beq.w	80035ae <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80036ca:	b2c9      	uxtb	r1, r1
 80036cc:	f7ff fdfb 	bl	80032c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80036d0:	7829      	ldrb	r1, [r5, #0]
 80036d2:	6061      	str	r1, [r4, #4]
 80036d4:	e7e6      	b.n	80036a4 <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 80036d6:	88ca      	ldrh	r2, [r1, #6]
 80036d8:	2a01      	cmp	r2, #1
 80036da:	d1b8      	bne.n	800364e <USBD_StdDevReq+0x132>
    switch (pdev->dev_state)
 80036dc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0b4      	beq.n	800364e <USBD_StdDevReq+0x132>
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d903      	bls.n	80036f0 <USBD_StdDevReq+0x1d4>
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d1b0      	bne.n	800364e <USBD_StdDevReq+0x132>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80036ec:	1d01      	adds	r1, r0, #4
 80036ee:	e003      	b.n	80036f8 <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 80036f0:	4601      	mov	r1, r0
 80036f2:	2300      	movs	r3, #0
 80036f4:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80036f8:	4620      	mov	r0, r4
 80036fa:	f000 f911 	bl	8003920 <USBD_CtlSendData>
 80036fe:	e730      	b.n	8003562 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8003700:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003704:	3b01      	subs	r3, #1
 8003706:	2b02      	cmp	r3, #2
 8003708:	d8a1      	bhi.n	800364e <USBD_StdDevReq+0x132>
    if(req->wLength != 0x2U)
 800370a:	88cb      	ldrh	r3, [r1, #6]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d19e      	bne.n	800364e <USBD_StdDevReq+0x132>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003710:	2301      	movs	r3, #1
 8003712:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8003714:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8003718:	b10b      	cbz	r3, 800371e <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800371a:	2303      	movs	r3, #3
 800371c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800371e:	2202      	movs	r2, #2
 8003720:	f104 010c 	add.w	r1, r4, #12
 8003724:	e7e8      	b.n	80036f8 <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003726:	884b      	ldrh	r3, [r1, #2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	f47f af1a 	bne.w	8003562 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 800372e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8003732:	e73c      	b.n	80035ae <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 8003734:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003738:	3b01      	subs	r3, #1
 800373a:	2b02      	cmp	r3, #2
 800373c:	d887      	bhi.n	800364e <USBD_StdDevReq+0x132>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800373e:	884b      	ldrh	r3, [r1, #2]
 8003740:	2b01      	cmp	r3, #1
 8003742:	f47f af0e 	bne.w	8003562 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	e7f1      	b.n	800372e <USBD_StdDevReq+0x212>
 800374a:	bf00      	nop
 800374c:	20000202 	.word	0x20000202

08003750 <USBD_StdItfReq>:
{
 8003750:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003752:	780b      	ldrb	r3, [r1, #0]
 8003754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003758:	2b20      	cmp	r3, #32
{
 800375a:	4604      	mov	r4, r0
 800375c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800375e:	d002      	beq.n	8003766 <USBD_StdItfReq+0x16>
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d000      	beq.n	8003766 <USBD_StdItfReq+0x16>
 8003764:	b9b3      	cbnz	r3, 8003794 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 8003766:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800376a:	3b01      	subs	r3, #1
 800376c:	2b02      	cmp	r3, #2
 800376e:	d810      	bhi.n	8003792 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003770:	792b      	ldrb	r3, [r5, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d80d      	bhi.n	8003792 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003776:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800377a:	4629      	mov	r1, r5
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4620      	mov	r0, r4
 8003780:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003782:	88eb      	ldrh	r3, [r5, #6]
 8003784:	b91b      	cbnz	r3, 800378e <USBD_StdItfReq+0x3e>
 8003786:	b910      	cbnz	r0, 800378e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8003788:	4620      	mov	r0, r4
 800378a:	f000 f8f5 	bl	8003978 <USBD_CtlSendStatus>
}
 800378e:	2000      	movs	r0, #0
 8003790:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8003792:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8003794:	f7ff feb7 	bl	8003506 <USBD_CtlError.constprop.1>
    break;
 8003798:	e7f9      	b.n	800378e <USBD_StdItfReq+0x3e>

0800379a <USBD_StdEPReq>:
{
 800379a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800379c:	780a      	ldrb	r2, [r1, #0]
 800379e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80037a2:	2a20      	cmp	r2, #32
{
 80037a4:	4604      	mov	r4, r0
 80037a6:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037a8:	d013      	beq.n	80037d2 <USBD_StdEPReq+0x38>
 80037aa:	2a40      	cmp	r2, #64	; 0x40
 80037ac:	d011      	beq.n	80037d2 <USBD_StdEPReq+0x38>
 80037ae:	b96a      	cbnz	r2, 80037cc <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 80037b0:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80037b2:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80037b4:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80037b6:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80037b8:	d01f      	beq.n	80037fa <USBD_StdEPReq+0x60>
 80037ba:	d335      	bcc.n	8003828 <USBD_StdEPReq+0x8e>
 80037bc:	2d03      	cmp	r5, #3
 80037be:	d105      	bne.n	80037cc <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80037c0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80037c4:	2a02      	cmp	r2, #2
 80037c6:	d026      	beq.n	8003816 <USBD_StdEPReq+0x7c>
 80037c8:	2a03      	cmp	r2, #3
 80037ca:	d00a      	beq.n	80037e2 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 80037cc:	f7ff fe9b 	bl	8003506 <USBD_CtlError.constprop.1>
    break;
 80037d0:	e005      	b.n	80037de <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 80037d2:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 80037d6:	4619      	mov	r1, r3
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	4620      	mov	r0, r4
 80037dc:	4790      	blx	r2
}
 80037de:	2000      	movs	r0, #0
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80037e2:	885a      	ldrh	r2, [r3, #2]
 80037e4:	b92a      	cbnz	r2, 80037f2 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80037e6:	064a      	lsls	r2, r1, #25
 80037e8:	d003      	beq.n	80037f2 <USBD_StdEPReq+0x58>
 80037ea:	88db      	ldrh	r3, [r3, #6]
 80037ec:	b90b      	cbnz	r3, 80037f2 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 80037ee:	f7fd fb6b 	bl	8000ec8 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80037f2:	4620      	mov	r0, r4
 80037f4:	f000 f8c0 	bl	8003978 <USBD_CtlSendStatus>
        break;
 80037f8:	e7f1      	b.n	80037de <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80037fa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80037fe:	2a02      	cmp	r2, #2
 8003800:	d009      	beq.n	8003816 <USBD_StdEPReq+0x7c>
 8003802:	2a03      	cmp	r2, #3
 8003804:	d1e2      	bne.n	80037cc <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003806:	885b      	ldrh	r3, [r3, #2]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e8      	bne.n	80037de <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 800380c:	064d      	lsls	r5, r1, #25
 800380e:	d0f0      	beq.n	80037f2 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003810:	f7fd fb68 	bl	8000ee4 <USBD_LL_ClearStallEP>
 8003814:	e7ed      	b.n	80037f2 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003816:	064b      	lsls	r3, r1, #25
 8003818:	d017      	beq.n	800384a <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800381a:	f7fd fb55 	bl	8000ec8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	4620      	mov	r0, r4
 8003822:	f7fd fb51 	bl	8000ec8 <USBD_LL_StallEP>
 8003826:	e7da      	b.n	80037de <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8003828:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800382c:	2b02      	cmp	r3, #2
 800382e:	d00e      	beq.n	800384e <USBD_StdEPReq+0xb4>
 8003830:	2b03      	cmp	r3, #3
 8003832:	d1cb      	bne.n	80037cc <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 8003834:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003838:	f04f 0314 	mov.w	r3, #20
 800383c:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003840:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 8003844:	d012      	beq.n	800386c <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003846:	6992      	ldr	r2, [r2, #24]
 8003848:	b9da      	cbnz	r2, 8003882 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 800384a:	4620      	mov	r0, r4
 800384c:	e7be      	b.n	80037cc <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800384e:	0649      	lsls	r1, r1, #25
 8003850:	d1fb      	bne.n	800384a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003852:	0613      	lsls	r3, r2, #24
 8003854:	bf4c      	ite	mi
 8003856:	f100 0114 	addmi.w	r1, r0, #20
 800385a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 800385e:	2300      	movs	r3, #0
 8003860:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003862:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003864:	4620      	mov	r0, r4
 8003866:	f000 f85b 	bl	8003920 <USBD_CtlSendData>
          break;
 800386a:	e7b8      	b.n	80037de <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800386c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8003870:	2a00      	cmp	r2, #0
 8003872:	d0ea      	beq.n	800384a <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003874:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003878:	fb03 0505 	mla	r5, r3, r5, r0
 800387c:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8003880:	e004      	b.n	800388c <USBD_StdEPReq+0xf2>
 8003882:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003886:	fb05 3503 	mla	r5, r5, r3, r3
 800388a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800388c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003890:	d103      	bne.n	800389a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8003892:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003894:	2202      	movs	r2, #2
 8003896:	4629      	mov	r1, r5
 8003898:	e7e4      	b.n	8003864 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800389a:	4620      	mov	r0, r4
 800389c:	f7fd fb30 	bl	8000f00 <USBD_LL_IsStallEP>
 80038a0:	b108      	cbz	r0, 80038a6 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e7f5      	b.n	8003892 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 80038a6:	6028      	str	r0, [r5, #0]
 80038a8:	e7f4      	b.n	8003894 <USBD_StdEPReq+0xfa>

080038aa <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80038aa:	780b      	ldrb	r3, [r1, #0]
 80038ac:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80038ae:	784b      	ldrb	r3, [r1, #1]
 80038b0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80038b2:	78ca      	ldrb	r2, [r1, #3]
 80038b4:	788b      	ldrb	r3, [r1, #2]
 80038b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038ba:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80038bc:	794a      	ldrb	r2, [r1, #5]
 80038be:	790b      	ldrb	r3, [r1, #4]
 80038c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038c4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80038c6:	79ca      	ldrb	r2, [r1, #7]
 80038c8:	798b      	ldrb	r3, [r1, #6]
 80038ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038ce:	80c3      	strh	r3, [r0, #6]
 80038d0:	4770      	bx	lr

080038d2 <USBD_CtlError>:
{
 80038d2:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 80038d4:	2180      	movs	r1, #128	; 0x80
{
 80038d6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80038d8:	f7fd faf6 	bl	8000ec8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80038dc:	4620      	mov	r0, r4
 80038de:	2100      	movs	r1, #0
}
 80038e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80038e4:	f7fd baf0 	b.w	8000ec8 <USBD_LL_StallEP>

080038e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80038e8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80038ea:	b188      	cbz	r0, 8003910 <USBD_GetString+0x28>
 80038ec:	4605      	mov	r5, r0
 80038ee:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80038f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2c00      	cmp	r4, #0
 80038f8:	d1f9      	bne.n	80038ee <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80038fa:	3301      	adds	r3, #1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003900:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003902:	2303      	movs	r3, #3
 8003904:	704b      	strb	r3, [r1, #1]
 8003906:	3801      	subs	r0, #1
 8003908:	2302      	movs	r3, #2
    while (*desc != '\0')
 800390a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800390e:	b905      	cbnz	r5, 8003912 <USBD_GetString+0x2a>
 8003910:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8003918:	3302      	adds	r3, #2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	548c      	strb	r4, [r1, r2]
 800391e:	e7f4      	b.n	800390a <USBD_GetString+0x22>

08003920 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003920:	b510      	push	{r4, lr}
 8003922:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003924:	2202      	movs	r2, #2
 8003926:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800392a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800392c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800392e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003930:	2100      	movs	r1, #0
 8003932:	f7fd fb07 	bl	8000f44 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003936:	2000      	movs	r0, #0
 8003938:	bd10      	pop	{r4, pc}

0800393a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800393a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800393c:	4613      	mov	r3, r2
 800393e:	460a      	mov	r2, r1
 8003940:	2100      	movs	r1, #0
 8003942:	f7fd faff 	bl	8000f44 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003946:	2000      	movs	r0, #0
 8003948:	bd08      	pop	{r3, pc}

0800394a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800394a:	b510      	push	{r4, lr}
 800394c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800394e:	2203      	movs	r2, #3
 8003950:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8003954:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003958:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800395a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800395e:	2100      	movs	r1, #0
 8003960:	f7fd fafe 	bl	8000f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003964:	2000      	movs	r0, #0
 8003966:	bd10      	pop	{r4, pc}

08003968 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8003968:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800396a:	4613      	mov	r3, r2
 800396c:	460a      	mov	r2, r1
 800396e:	2100      	movs	r1, #0
 8003970:	f7fd faf6 	bl	8000f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003974:	2000      	movs	r0, #0
 8003976:	bd08      	pop	{r3, pc}

08003978 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8003978:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800397a:	2304      	movs	r3, #4
 800397c:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003980:	2300      	movs	r3, #0
 8003982:	461a      	mov	r2, r3
 8003984:	4619      	mov	r1, r3
 8003986:	f7fd fadd 	bl	8000f44 <USBD_LL_Transmit>

  return USBD_OK;
}
 800398a:	2000      	movs	r0, #0
 800398c:	bd08      	pop	{r3, pc}

0800398e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800398e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003990:	2305      	movs	r3, #5
 8003992:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003996:	2300      	movs	r3, #0
 8003998:	461a      	mov	r2, r3
 800399a:	4619      	mov	r1, r3
 800399c:	f7fd fae0 	bl	8000f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039a0:	2000      	movs	r0, #0
 80039a2:	bd08      	pop	{r3, pc}

080039a4 <__errno>:
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <__errno+0x8>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000017c 	.word	0x2000017c

080039b0 <__libc_init_array>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	4e0d      	ldr	r6, [pc, #52]	; (80039e8 <__libc_init_array+0x38>)
 80039b4:	4c0d      	ldr	r4, [pc, #52]	; (80039ec <__libc_init_array+0x3c>)
 80039b6:	1ba4      	subs	r4, r4, r6
 80039b8:	10a4      	asrs	r4, r4, #2
 80039ba:	2500      	movs	r5, #0
 80039bc:	42a5      	cmp	r5, r4
 80039be:	d109      	bne.n	80039d4 <__libc_init_array+0x24>
 80039c0:	4e0b      	ldr	r6, [pc, #44]	; (80039f0 <__libc_init_array+0x40>)
 80039c2:	4c0c      	ldr	r4, [pc, #48]	; (80039f4 <__libc_init_array+0x44>)
 80039c4:	f000 fc4c 	bl	8004260 <_init>
 80039c8:	1ba4      	subs	r4, r4, r6
 80039ca:	10a4      	asrs	r4, r4, #2
 80039cc:	2500      	movs	r5, #0
 80039ce:	42a5      	cmp	r5, r4
 80039d0:	d105      	bne.n	80039de <__libc_init_array+0x2e>
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039d8:	4798      	blx	r3
 80039da:	3501      	adds	r5, #1
 80039dc:	e7ee      	b.n	80039bc <__libc_init_array+0xc>
 80039de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039e2:	4798      	blx	r3
 80039e4:	3501      	adds	r5, #1
 80039e6:	e7f2      	b.n	80039ce <__libc_init_array+0x1e>
 80039e8:	0800435c 	.word	0x0800435c
 80039ec:	0800435c 	.word	0x0800435c
 80039f0:	0800435c 	.word	0x0800435c
 80039f4:	08004360 	.word	0x08004360

080039f8 <malloc>:
 80039f8:	4b02      	ldr	r3, [pc, #8]	; (8003a04 <malloc+0xc>)
 80039fa:	4601      	mov	r1, r0
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	f000 b861 	b.w	8003ac4 <_malloc_r>
 8003a02:	bf00      	nop
 8003a04:	2000017c 	.word	0x2000017c

08003a08 <free>:
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <free+0xc>)
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f000 b80b 	b.w	8003a28 <_free_r>
 8003a12:	bf00      	nop
 8003a14:	2000017c 	.word	0x2000017c

08003a18 <memset>:
 8003a18:	4402      	add	r2, r0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_free_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d045      	beq.n	8003abc <_free_r+0x94>
 8003a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a34:	1f0c      	subs	r4, r1, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfb8      	it	lt
 8003a3a:	18e4      	addlt	r4, r4, r3
 8003a3c:	f000 f8d4 	bl	8003be8 <__malloc_lock>
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <_free_r+0x98>)
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	4610      	mov	r0, r2
 8003a46:	b933      	cbnz	r3, 8003a56 <_free_r+0x2e>
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	6014      	str	r4, [r2, #0]
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a52:	f000 b8ca 	b.w	8003bea <__malloc_unlock>
 8003a56:	42a3      	cmp	r3, r4
 8003a58:	d90c      	bls.n	8003a74 <_free_r+0x4c>
 8003a5a:	6821      	ldr	r1, [r4, #0]
 8003a5c:	1862      	adds	r2, r4, r1
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	bf04      	itt	eq
 8003a62:	681a      	ldreq	r2, [r3, #0]
 8003a64:	685b      	ldreq	r3, [r3, #4]
 8003a66:	6063      	str	r3, [r4, #4]
 8003a68:	bf04      	itt	eq
 8003a6a:	1852      	addeq	r2, r2, r1
 8003a6c:	6022      	streq	r2, [r4, #0]
 8003a6e:	6004      	str	r4, [r0, #0]
 8003a70:	e7ec      	b.n	8003a4c <_free_r+0x24>
 8003a72:	4613      	mov	r3, r2
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	b10a      	cbz	r2, 8003a7c <_free_r+0x54>
 8003a78:	42a2      	cmp	r2, r4
 8003a7a:	d9fa      	bls.n	8003a72 <_free_r+0x4a>
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	1858      	adds	r0, r3, r1
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d10b      	bne.n	8003a9c <_free_r+0x74>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	4401      	add	r1, r0
 8003a88:	1858      	adds	r0, r3, r1
 8003a8a:	4282      	cmp	r2, r0
 8003a8c:	6019      	str	r1, [r3, #0]
 8003a8e:	d1dd      	bne.n	8003a4c <_free_r+0x24>
 8003a90:	6810      	ldr	r0, [r2, #0]
 8003a92:	6852      	ldr	r2, [r2, #4]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	4401      	add	r1, r0
 8003a98:	6019      	str	r1, [r3, #0]
 8003a9a:	e7d7      	b.n	8003a4c <_free_r+0x24>
 8003a9c:	d902      	bls.n	8003aa4 <_free_r+0x7c>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	e7d3      	b.n	8003a4c <_free_r+0x24>
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	1821      	adds	r1, r4, r0
 8003aa8:	428a      	cmp	r2, r1
 8003aaa:	bf04      	itt	eq
 8003aac:	6811      	ldreq	r1, [r2, #0]
 8003aae:	6852      	ldreq	r2, [r2, #4]
 8003ab0:	6062      	str	r2, [r4, #4]
 8003ab2:	bf04      	itt	eq
 8003ab4:	1809      	addeq	r1, r1, r0
 8003ab6:	6021      	streq	r1, [r4, #0]
 8003ab8:	605c      	str	r4, [r3, #4]
 8003aba:	e7c7      	b.n	8003a4c <_free_r+0x24>
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000204 	.word	0x20000204

08003ac4 <_malloc_r>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	1ccd      	adds	r5, r1, #3
 8003ac8:	f025 0503 	bic.w	r5, r5, #3
 8003acc:	3508      	adds	r5, #8
 8003ace:	2d0c      	cmp	r5, #12
 8003ad0:	bf38      	it	cc
 8003ad2:	250c      	movcc	r5, #12
 8003ad4:	2d00      	cmp	r5, #0
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	db01      	blt.n	8003ade <_malloc_r+0x1a>
 8003ada:	42a9      	cmp	r1, r5
 8003adc:	d903      	bls.n	8003ae6 <_malloc_r+0x22>
 8003ade:	230c      	movs	r3, #12
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
 8003ae6:	f000 f87f 	bl	8003be8 <__malloc_lock>
 8003aea:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <_malloc_r+0xb4>)
 8003aec:	6814      	ldr	r4, [r2, #0]
 8003aee:	4621      	mov	r1, r4
 8003af0:	b991      	cbnz	r1, 8003b18 <_malloc_r+0x54>
 8003af2:	4c22      	ldr	r4, [pc, #136]	; (8003b7c <_malloc_r+0xb8>)
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	b91b      	cbnz	r3, 8003b00 <_malloc_r+0x3c>
 8003af8:	4630      	mov	r0, r6
 8003afa:	f000 f841 	bl	8003b80 <_sbrk_r>
 8003afe:	6020      	str	r0, [r4, #0]
 8003b00:	4629      	mov	r1, r5
 8003b02:	4630      	mov	r0, r6
 8003b04:	f000 f83c 	bl	8003b80 <_sbrk_r>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d126      	bne.n	8003b5a <_malloc_r+0x96>
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	6033      	str	r3, [r6, #0]
 8003b10:	4630      	mov	r0, r6
 8003b12:	f000 f86a 	bl	8003bea <__malloc_unlock>
 8003b16:	e7e4      	b.n	8003ae2 <_malloc_r+0x1e>
 8003b18:	680b      	ldr	r3, [r1, #0]
 8003b1a:	1b5b      	subs	r3, r3, r5
 8003b1c:	d41a      	bmi.n	8003b54 <_malloc_r+0x90>
 8003b1e:	2b0b      	cmp	r3, #11
 8003b20:	d90f      	bls.n	8003b42 <_malloc_r+0x7e>
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	50cd      	str	r5, [r1, r3]
 8003b26:	18cc      	adds	r4, r1, r3
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 f85e 	bl	8003bea <__malloc_unlock>
 8003b2e:	f104 000b 	add.w	r0, r4, #11
 8003b32:	1d23      	adds	r3, r4, #4
 8003b34:	f020 0007 	bic.w	r0, r0, #7
 8003b38:	1ac3      	subs	r3, r0, r3
 8003b3a:	d01b      	beq.n	8003b74 <_malloc_r+0xb0>
 8003b3c:	425a      	negs	r2, r3
 8003b3e:	50e2      	str	r2, [r4, r3]
 8003b40:	bd70      	pop	{r4, r5, r6, pc}
 8003b42:	428c      	cmp	r4, r1
 8003b44:	bf0d      	iteet	eq
 8003b46:	6863      	ldreq	r3, [r4, #4]
 8003b48:	684b      	ldrne	r3, [r1, #4]
 8003b4a:	6063      	strne	r3, [r4, #4]
 8003b4c:	6013      	streq	r3, [r2, #0]
 8003b4e:	bf18      	it	ne
 8003b50:	460c      	movne	r4, r1
 8003b52:	e7e9      	b.n	8003b28 <_malloc_r+0x64>
 8003b54:	460c      	mov	r4, r1
 8003b56:	6849      	ldr	r1, [r1, #4]
 8003b58:	e7ca      	b.n	8003af0 <_malloc_r+0x2c>
 8003b5a:	1cc4      	adds	r4, r0, #3
 8003b5c:	f024 0403 	bic.w	r4, r4, #3
 8003b60:	42a0      	cmp	r0, r4
 8003b62:	d005      	beq.n	8003b70 <_malloc_r+0xac>
 8003b64:	1a21      	subs	r1, r4, r0
 8003b66:	4630      	mov	r0, r6
 8003b68:	f000 f80a 	bl	8003b80 <_sbrk_r>
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d0cd      	beq.n	8003b0c <_malloc_r+0x48>
 8003b70:	6025      	str	r5, [r4, #0]
 8003b72:	e7d9      	b.n	8003b28 <_malloc_r+0x64>
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	bf00      	nop
 8003b78:	20000204 	.word	0x20000204
 8003b7c:	20000208 	.word	0x20000208

08003b80 <_sbrk_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4c06      	ldr	r4, [pc, #24]	; (8003b9c <_sbrk_r+0x1c>)
 8003b84:	2300      	movs	r3, #0
 8003b86:	4605      	mov	r5, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	f7fc fd32 	bl	80005f4 <_sbrk>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_sbrk_r+0x1a>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_sbrk_r+0x1a>
 8003b98:	602b      	str	r3, [r5, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	20001c1c 	.word	0x20001c1c

08003ba0 <siprintf>:
 8003ba0:	b40e      	push	{r1, r2, r3}
 8003ba2:	b500      	push	{lr}
 8003ba4:	b09c      	sub	sp, #112	; 0x70
 8003ba6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003baa:	ab1d      	add	r3, sp, #116	; 0x74
 8003bac:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003bb0:	9002      	str	r0, [sp, #8]
 8003bb2:	9006      	str	r0, [sp, #24]
 8003bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bb8:	480a      	ldr	r0, [pc, #40]	; (8003be4 <siprintf+0x44>)
 8003bba:	9104      	str	r1, [sp, #16]
 8003bbc:	9107      	str	r1, [sp, #28]
 8003bbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	a902      	add	r1, sp, #8
 8003bd0:	f000 f868 	bl	8003ca4 <_svfiprintf_r>
 8003bd4:	9b02      	ldr	r3, [sp, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	b01c      	add	sp, #112	; 0x70
 8003bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be0:	b003      	add	sp, #12
 8003be2:	4770      	bx	lr
 8003be4:	2000017c 	.word	0x2000017c

08003be8 <__malloc_lock>:
 8003be8:	4770      	bx	lr

08003bea <__malloc_unlock>:
 8003bea:	4770      	bx	lr

08003bec <__ssputs_r>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	688e      	ldr	r6, [r1, #8]
 8003bf2:	429e      	cmp	r6, r3
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4691      	mov	r9, r2
 8003bfa:	4698      	mov	r8, r3
 8003bfc:	d835      	bhi.n	8003c6a <__ssputs_r+0x7e>
 8003bfe:	898a      	ldrh	r2, [r1, #12]
 8003c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c04:	d031      	beq.n	8003c6a <__ssputs_r+0x7e>
 8003c06:	6825      	ldr	r5, [r4, #0]
 8003c08:	6909      	ldr	r1, [r1, #16]
 8003c0a:	1a6f      	subs	r7, r5, r1
 8003c0c:	6965      	ldr	r5, [r4, #20]
 8003c0e:	2302      	movs	r3, #2
 8003c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c14:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c18:	f108 0301 	add.w	r3, r8, #1
 8003c1c:	443b      	add	r3, r7
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	bf38      	it	cc
 8003c22:	461d      	movcc	r5, r3
 8003c24:	0553      	lsls	r3, r2, #21
 8003c26:	d531      	bpl.n	8003c8c <__ssputs_r+0xa0>
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7ff ff4b 	bl	8003ac4 <_malloc_r>
 8003c2e:	4606      	mov	r6, r0
 8003c30:	b950      	cbnz	r0, 8003c48 <__ssputs_r+0x5c>
 8003c32:	230c      	movs	r3, #12
 8003c34:	f8ca 3000 	str.w	r3, [sl]
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c48:	463a      	mov	r2, r7
 8003c4a:	6921      	ldr	r1, [r4, #16]
 8003c4c:	f000 fab4 	bl	80041b8 <memcpy>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5a:	81a3      	strh	r3, [r4, #12]
 8003c5c:	6126      	str	r6, [r4, #16]
 8003c5e:	6165      	str	r5, [r4, #20]
 8003c60:	443e      	add	r6, r7
 8003c62:	1bed      	subs	r5, r5, r7
 8003c64:	6026      	str	r6, [r4, #0]
 8003c66:	60a5      	str	r5, [r4, #8]
 8003c68:	4646      	mov	r6, r8
 8003c6a:	4546      	cmp	r6, r8
 8003c6c:	bf28      	it	cs
 8003c6e:	4646      	movcs	r6, r8
 8003c70:	4632      	mov	r2, r6
 8003c72:	4649      	mov	r1, r9
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	f000 faaa 	bl	80041ce <memmove>
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	1b9b      	subs	r3, r3, r6
 8003c7e:	60a3      	str	r3, [r4, #8]
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	441e      	add	r6, r3
 8003c84:	6026      	str	r6, [r4, #0]
 8003c86:	2000      	movs	r0, #0
 8003c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	f000 fab8 	bl	8004202 <_realloc_r>
 8003c92:	4606      	mov	r6, r0
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d1e1      	bne.n	8003c5c <__ssputs_r+0x70>
 8003c98:	6921      	ldr	r1, [r4, #16]
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	f7ff fec4 	bl	8003a28 <_free_r>
 8003ca0:	e7c7      	b.n	8003c32 <__ssputs_r+0x46>
	...

08003ca4 <_svfiprintf_r>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	b09d      	sub	sp, #116	; 0x74
 8003caa:	4680      	mov	r8, r0
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	898b      	ldrh	r3, [r1, #12]
 8003cb0:	061c      	lsls	r4, r3, #24
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	4616      	mov	r6, r2
 8003cb6:	d50f      	bpl.n	8003cd8 <_svfiprintf_r+0x34>
 8003cb8:	690b      	ldr	r3, [r1, #16]
 8003cba:	b96b      	cbnz	r3, 8003cd8 <_svfiprintf_r+0x34>
 8003cbc:	2140      	movs	r1, #64	; 0x40
 8003cbe:	f7ff ff01 	bl	8003ac4 <_malloc_r>
 8003cc2:	6028      	str	r0, [r5, #0]
 8003cc4:	6128      	str	r0, [r5, #16]
 8003cc6:	b928      	cbnz	r0, 8003cd4 <_svfiprintf_r+0x30>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	f8c8 3000 	str.w	r3, [r8]
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd2:	e0c5      	b.n	8003e60 <_svfiprintf_r+0x1bc>
 8003cd4:	2340      	movs	r3, #64	; 0x40
 8003cd6:	616b      	str	r3, [r5, #20]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9309      	str	r3, [sp, #36]	; 0x24
 8003cdc:	2320      	movs	r3, #32
 8003cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ce2:	2330      	movs	r3, #48	; 0x30
 8003ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ce8:	f04f 0b01 	mov.w	fp, #1
 8003cec:	4637      	mov	r7, r6
 8003cee:	463c      	mov	r4, r7
 8003cf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d13c      	bne.n	8003d72 <_svfiprintf_r+0xce>
 8003cf8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003cfc:	d00b      	beq.n	8003d16 <_svfiprintf_r+0x72>
 8003cfe:	4653      	mov	r3, sl
 8003d00:	4632      	mov	r2, r6
 8003d02:	4629      	mov	r1, r5
 8003d04:	4640      	mov	r0, r8
 8003d06:	f7ff ff71 	bl	8003bec <__ssputs_r>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f000 80a3 	beq.w	8003e56 <_svfiprintf_r+0x1b2>
 8003d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d12:	4453      	add	r3, sl
 8003d14:	9309      	str	r3, [sp, #36]	; 0x24
 8003d16:	783b      	ldrb	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 809c 	beq.w	8003e56 <_svfiprintf_r+0x1b2>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	9304      	str	r3, [sp, #16]
 8003d26:	9307      	str	r3, [sp, #28]
 8003d28:	9205      	str	r2, [sp, #20]
 8003d2a:	9306      	str	r3, [sp, #24]
 8003d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d30:	931a      	str	r3, [sp, #104]	; 0x68
 8003d32:	2205      	movs	r2, #5
 8003d34:	7821      	ldrb	r1, [r4, #0]
 8003d36:	4850      	ldr	r0, [pc, #320]	; (8003e78 <_svfiprintf_r+0x1d4>)
 8003d38:	f7fc fa5a 	bl	80001f0 <memchr>
 8003d3c:	1c67      	adds	r7, r4, #1
 8003d3e:	9b04      	ldr	r3, [sp, #16]
 8003d40:	b9d8      	cbnz	r0, 8003d7a <_svfiprintf_r+0xd6>
 8003d42:	06d9      	lsls	r1, r3, #27
 8003d44:	bf44      	itt	mi
 8003d46:	2220      	movmi	r2, #32
 8003d48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d4c:	071a      	lsls	r2, r3, #28
 8003d4e:	bf44      	itt	mi
 8003d50:	222b      	movmi	r2, #43	; 0x2b
 8003d52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d56:	7822      	ldrb	r2, [r4, #0]
 8003d58:	2a2a      	cmp	r2, #42	; 0x2a
 8003d5a:	d016      	beq.n	8003d8a <_svfiprintf_r+0xe6>
 8003d5c:	9a07      	ldr	r2, [sp, #28]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	200a      	movs	r0, #10
 8003d62:	4627      	mov	r7, r4
 8003d64:	3401      	adds	r4, #1
 8003d66:	783b      	ldrb	r3, [r7, #0]
 8003d68:	3b30      	subs	r3, #48	; 0x30
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	d951      	bls.n	8003e12 <_svfiprintf_r+0x16e>
 8003d6e:	b1c9      	cbz	r1, 8003da4 <_svfiprintf_r+0x100>
 8003d70:	e011      	b.n	8003d96 <_svfiprintf_r+0xf2>
 8003d72:	2b25      	cmp	r3, #37	; 0x25
 8003d74:	d0c0      	beq.n	8003cf8 <_svfiprintf_r+0x54>
 8003d76:	4627      	mov	r7, r4
 8003d78:	e7b9      	b.n	8003cee <_svfiprintf_r+0x4a>
 8003d7a:	4a3f      	ldr	r2, [pc, #252]	; (8003e78 <_svfiprintf_r+0x1d4>)
 8003d7c:	1a80      	subs	r0, r0, r2
 8003d7e:	fa0b f000 	lsl.w	r0, fp, r0
 8003d82:	4318      	orrs	r0, r3
 8003d84:	9004      	str	r0, [sp, #16]
 8003d86:	463c      	mov	r4, r7
 8003d88:	e7d3      	b.n	8003d32 <_svfiprintf_r+0x8e>
 8003d8a:	9a03      	ldr	r2, [sp, #12]
 8003d8c:	1d11      	adds	r1, r2, #4
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	9103      	str	r1, [sp, #12]
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	db01      	blt.n	8003d9a <_svfiprintf_r+0xf6>
 8003d96:	9207      	str	r2, [sp, #28]
 8003d98:	e004      	b.n	8003da4 <_svfiprintf_r+0x100>
 8003d9a:	4252      	negs	r2, r2
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	9207      	str	r2, [sp, #28]
 8003da2:	9304      	str	r3, [sp, #16]
 8003da4:	783b      	ldrb	r3, [r7, #0]
 8003da6:	2b2e      	cmp	r3, #46	; 0x2e
 8003da8:	d10e      	bne.n	8003dc8 <_svfiprintf_r+0x124>
 8003daa:	787b      	ldrb	r3, [r7, #1]
 8003dac:	2b2a      	cmp	r3, #42	; 0x2a
 8003dae:	f107 0101 	add.w	r1, r7, #1
 8003db2:	d132      	bne.n	8003e1a <_svfiprintf_r+0x176>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	9203      	str	r2, [sp, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bfb8      	it	lt
 8003dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dc4:	3702      	adds	r7, #2
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	4c2c      	ldr	r4, [pc, #176]	; (8003e7c <_svfiprintf_r+0x1d8>)
 8003dca:	7839      	ldrb	r1, [r7, #0]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7fc fa0e 	bl	80001f0 <memchr>
 8003dd4:	b138      	cbz	r0, 8003de6 <_svfiprintf_r+0x142>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	1b00      	subs	r0, r0, r4
 8003dda:	fa03 f000 	lsl.w	r0, r3, r0
 8003dde:	9b04      	ldr	r3, [sp, #16]
 8003de0:	4303      	orrs	r3, r0
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	3701      	adds	r7, #1
 8003de6:	7839      	ldrb	r1, [r7, #0]
 8003de8:	4825      	ldr	r0, [pc, #148]	; (8003e80 <_svfiprintf_r+0x1dc>)
 8003dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dee:	2206      	movs	r2, #6
 8003df0:	1c7e      	adds	r6, r7, #1
 8003df2:	f7fc f9fd 	bl	80001f0 <memchr>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d035      	beq.n	8003e66 <_svfiprintf_r+0x1c2>
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <_svfiprintf_r+0x1e0>)
 8003dfc:	b9fb      	cbnz	r3, 8003e3e <_svfiprintf_r+0x19a>
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	3307      	adds	r3, #7
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	3308      	adds	r3, #8
 8003e08:	9303      	str	r3, [sp, #12]
 8003e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e0c:	444b      	add	r3, r9
 8003e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e10:	e76c      	b.n	8003cec <_svfiprintf_r+0x48>
 8003e12:	fb00 3202 	mla	r2, r0, r2, r3
 8003e16:	2101      	movs	r1, #1
 8003e18:	e7a3      	b.n	8003d62 <_svfiprintf_r+0xbe>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9305      	str	r3, [sp, #20]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	240a      	movs	r4, #10
 8003e22:	460f      	mov	r7, r1
 8003e24:	3101      	adds	r1, #1
 8003e26:	783a      	ldrb	r2, [r7, #0]
 8003e28:	3a30      	subs	r2, #48	; 0x30
 8003e2a:	2a09      	cmp	r2, #9
 8003e2c:	d903      	bls.n	8003e36 <_svfiprintf_r+0x192>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ca      	beq.n	8003dc8 <_svfiprintf_r+0x124>
 8003e32:	9005      	str	r0, [sp, #20]
 8003e34:	e7c8      	b.n	8003dc8 <_svfiprintf_r+0x124>
 8003e36:	fb04 2000 	mla	r0, r4, r0, r2
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e7f1      	b.n	8003e22 <_svfiprintf_r+0x17e>
 8003e3e:	ab03      	add	r3, sp, #12
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	462a      	mov	r2, r5
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <_svfiprintf_r+0x1e4>)
 8003e46:	a904      	add	r1, sp, #16
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f3af 8000 	nop.w
 8003e4e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e52:	4681      	mov	r9, r0
 8003e54:	d1d9      	bne.n	8003e0a <_svfiprintf_r+0x166>
 8003e56:	89ab      	ldrh	r3, [r5, #12]
 8003e58:	065b      	lsls	r3, r3, #25
 8003e5a:	f53f af38 	bmi.w	8003cce <_svfiprintf_r+0x2a>
 8003e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e60:	b01d      	add	sp, #116	; 0x74
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	ab03      	add	r3, sp, #12
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	462a      	mov	r2, r5
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <_svfiprintf_r+0x1e4>)
 8003e6e:	a904      	add	r1, sp, #16
 8003e70:	4640      	mov	r0, r8
 8003e72:	f000 f881 	bl	8003f78 <_printf_i>
 8003e76:	e7ea      	b.n	8003e4e <_svfiprintf_r+0x1aa>
 8003e78:	08004321 	.word	0x08004321
 8003e7c:	08004327 	.word	0x08004327
 8003e80:	0800432b 	.word	0x0800432b
 8003e84:	00000000 	.word	0x00000000
 8003e88:	08003bed 	.word	0x08003bed

08003e8c <_printf_common>:
 8003e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	4691      	mov	r9, r2
 8003e92:	461f      	mov	r7, r3
 8003e94:	688a      	ldr	r2, [r1, #8]
 8003e96:	690b      	ldr	r3, [r1, #16]
 8003e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	bfb8      	it	lt
 8003ea0:	4613      	movlt	r3, r2
 8003ea2:	f8c9 3000 	str.w	r3, [r9]
 8003ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eaa:	4606      	mov	r6, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	b112      	cbz	r2, 8003eb6 <_printf_common+0x2a>
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f8c9 3000 	str.w	r3, [r9]
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	0699      	lsls	r1, r3, #26
 8003eba:	bf42      	ittt	mi
 8003ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ec0:	3302      	addmi	r3, #2
 8003ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ec6:	6825      	ldr	r5, [r4, #0]
 8003ec8:	f015 0506 	ands.w	r5, r5, #6
 8003ecc:	d107      	bne.n	8003ede <_printf_common+0x52>
 8003ece:	f104 0a19 	add.w	sl, r4, #25
 8003ed2:	68e3      	ldr	r3, [r4, #12]
 8003ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	429d      	cmp	r5, r3
 8003edc:	db29      	blt.n	8003f32 <_printf_common+0xa6>
 8003ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	3300      	adds	r3, #0
 8003ee6:	bf18      	it	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	0692      	lsls	r2, r2, #26
 8003eec:	d42e      	bmi.n	8003f4c <_printf_common+0xc0>
 8003eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	47c0      	blx	r8
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d021      	beq.n	8003f40 <_printf_common+0xb4>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	68e5      	ldr	r5, [r4, #12]
 8003f00:	f8d9 2000 	ldr.w	r2, [r9]
 8003f04:	f003 0306 	and.w	r3, r3, #6
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	bf08      	it	eq
 8003f0c:	1aad      	subeq	r5, r5, r2
 8003f0e:	68a3      	ldr	r3, [r4, #8]
 8003f10:	6922      	ldr	r2, [r4, #16]
 8003f12:	bf0c      	ite	eq
 8003f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f18:	2500      	movne	r5, #0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	bfc4      	itt	gt
 8003f1e:	1a9b      	subgt	r3, r3, r2
 8003f20:	18ed      	addgt	r5, r5, r3
 8003f22:	f04f 0900 	mov.w	r9, #0
 8003f26:	341a      	adds	r4, #26
 8003f28:	454d      	cmp	r5, r9
 8003f2a:	d11b      	bne.n	8003f64 <_printf_common+0xd8>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f32:	2301      	movs	r3, #1
 8003f34:	4652      	mov	r2, sl
 8003f36:	4639      	mov	r1, r7
 8003f38:	4630      	mov	r0, r6
 8003f3a:	47c0      	blx	r8
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d103      	bne.n	8003f48 <_printf_common+0xbc>
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	3501      	adds	r5, #1
 8003f4a:	e7c2      	b.n	8003ed2 <_printf_common+0x46>
 8003f4c:	18e1      	adds	r1, r4, r3
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	2030      	movs	r0, #48	; 0x30
 8003f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f56:	4422      	add	r2, r4
 8003f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f60:	3302      	adds	r3, #2
 8003f62:	e7c4      	b.n	8003eee <_printf_common+0x62>
 8003f64:	2301      	movs	r3, #1
 8003f66:	4622      	mov	r2, r4
 8003f68:	4639      	mov	r1, r7
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	47c0      	blx	r8
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d0e6      	beq.n	8003f40 <_printf_common+0xb4>
 8003f72:	f109 0901 	add.w	r9, r9, #1
 8003f76:	e7d7      	b.n	8003f28 <_printf_common+0x9c>

08003f78 <_printf_i>:
 8003f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f7c:	4617      	mov	r7, r2
 8003f7e:	7e0a      	ldrb	r2, [r1, #24]
 8003f80:	b085      	sub	sp, #20
 8003f82:	2a6e      	cmp	r2, #110	; 0x6e
 8003f84:	4698      	mov	r8, r3
 8003f86:	4606      	mov	r6, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f8c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003f90:	f000 80bc 	beq.w	800410c <_printf_i+0x194>
 8003f94:	d81a      	bhi.n	8003fcc <_printf_i+0x54>
 8003f96:	2a63      	cmp	r2, #99	; 0x63
 8003f98:	d02e      	beq.n	8003ff8 <_printf_i+0x80>
 8003f9a:	d80a      	bhi.n	8003fb2 <_printf_i+0x3a>
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	f000 80c8 	beq.w	8004132 <_printf_i+0x1ba>
 8003fa2:	2a58      	cmp	r2, #88	; 0x58
 8003fa4:	f000 808a 	beq.w	80040bc <_printf_i+0x144>
 8003fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003fb0:	e02a      	b.n	8004008 <_printf_i+0x90>
 8003fb2:	2a64      	cmp	r2, #100	; 0x64
 8003fb4:	d001      	beq.n	8003fba <_printf_i+0x42>
 8003fb6:	2a69      	cmp	r2, #105	; 0x69
 8003fb8:	d1f6      	bne.n	8003fa8 <_printf_i+0x30>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003fc2:	d023      	beq.n	800400c <_printf_i+0x94>
 8003fc4:	1d11      	adds	r1, r2, #4
 8003fc6:	6019      	str	r1, [r3, #0]
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	e027      	b.n	800401c <_printf_i+0xa4>
 8003fcc:	2a73      	cmp	r2, #115	; 0x73
 8003fce:	f000 80b4 	beq.w	800413a <_printf_i+0x1c2>
 8003fd2:	d808      	bhi.n	8003fe6 <_printf_i+0x6e>
 8003fd4:	2a6f      	cmp	r2, #111	; 0x6f
 8003fd6:	d02a      	beq.n	800402e <_printf_i+0xb6>
 8003fd8:	2a70      	cmp	r2, #112	; 0x70
 8003fda:	d1e5      	bne.n	8003fa8 <_printf_i+0x30>
 8003fdc:	680a      	ldr	r2, [r1, #0]
 8003fde:	f042 0220 	orr.w	r2, r2, #32
 8003fe2:	600a      	str	r2, [r1, #0]
 8003fe4:	e003      	b.n	8003fee <_printf_i+0x76>
 8003fe6:	2a75      	cmp	r2, #117	; 0x75
 8003fe8:	d021      	beq.n	800402e <_printf_i+0xb6>
 8003fea:	2a78      	cmp	r2, #120	; 0x78
 8003fec:	d1dc      	bne.n	8003fa8 <_printf_i+0x30>
 8003fee:	2278      	movs	r2, #120	; 0x78
 8003ff0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003ff4:	496e      	ldr	r1, [pc, #440]	; (80041b0 <_printf_i+0x238>)
 8003ff6:	e064      	b.n	80040c2 <_printf_i+0x14a>
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ffe:	1d11      	adds	r1, r2, #4
 8004000:	6019      	str	r1, [r3, #0]
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004008:	2301      	movs	r3, #1
 800400a:	e0a3      	b.n	8004154 <_printf_i+0x1dc>
 800400c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004010:	f102 0104 	add.w	r1, r2, #4
 8004014:	6019      	str	r1, [r3, #0]
 8004016:	d0d7      	beq.n	8003fc8 <_printf_i+0x50>
 8004018:	f9b2 3000 	ldrsh.w	r3, [r2]
 800401c:	2b00      	cmp	r3, #0
 800401e:	da03      	bge.n	8004028 <_printf_i+0xb0>
 8004020:	222d      	movs	r2, #45	; 0x2d
 8004022:	425b      	negs	r3, r3
 8004024:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004028:	4962      	ldr	r1, [pc, #392]	; (80041b4 <_printf_i+0x23c>)
 800402a:	220a      	movs	r2, #10
 800402c:	e017      	b.n	800405e <_printf_i+0xe6>
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004036:	d003      	beq.n	8004040 <_printf_i+0xc8>
 8004038:	1d08      	adds	r0, r1, #4
 800403a:	6018      	str	r0, [r3, #0]
 800403c:	680b      	ldr	r3, [r1, #0]
 800403e:	e006      	b.n	800404e <_printf_i+0xd6>
 8004040:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004044:	f101 0004 	add.w	r0, r1, #4
 8004048:	6018      	str	r0, [r3, #0]
 800404a:	d0f7      	beq.n	800403c <_printf_i+0xc4>
 800404c:	880b      	ldrh	r3, [r1, #0]
 800404e:	4959      	ldr	r1, [pc, #356]	; (80041b4 <_printf_i+0x23c>)
 8004050:	2a6f      	cmp	r2, #111	; 0x6f
 8004052:	bf14      	ite	ne
 8004054:	220a      	movne	r2, #10
 8004056:	2208      	moveq	r2, #8
 8004058:	2000      	movs	r0, #0
 800405a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800405e:	6865      	ldr	r5, [r4, #4]
 8004060:	60a5      	str	r5, [r4, #8]
 8004062:	2d00      	cmp	r5, #0
 8004064:	f2c0 809c 	blt.w	80041a0 <_printf_i+0x228>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	f020 0004 	bic.w	r0, r0, #4
 800406e:	6020      	str	r0, [r4, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d13f      	bne.n	80040f4 <_printf_i+0x17c>
 8004074:	2d00      	cmp	r5, #0
 8004076:	f040 8095 	bne.w	80041a4 <_printf_i+0x22c>
 800407a:	4675      	mov	r5, lr
 800407c:	2a08      	cmp	r2, #8
 800407e:	d10b      	bne.n	8004098 <_printf_i+0x120>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	07da      	lsls	r2, r3, #31
 8004084:	d508      	bpl.n	8004098 <_printf_i+0x120>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	6862      	ldr	r2, [r4, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	bfde      	ittt	le
 800408e:	2330      	movle	r3, #48	; 0x30
 8004090:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004094:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004098:	ebae 0305 	sub.w	r3, lr, r5
 800409c:	6123      	str	r3, [r4, #16]
 800409e:	f8cd 8000 	str.w	r8, [sp]
 80040a2:	463b      	mov	r3, r7
 80040a4:	aa03      	add	r2, sp, #12
 80040a6:	4621      	mov	r1, r4
 80040a8:	4630      	mov	r0, r6
 80040aa:	f7ff feef 	bl	8003e8c <_printf_common>
 80040ae:	3001      	adds	r0, #1
 80040b0:	d155      	bne.n	800415e <_printf_i+0x1e6>
 80040b2:	f04f 30ff 	mov.w	r0, #4294967295
 80040b6:	b005      	add	sp, #20
 80040b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80040c0:	493c      	ldr	r1, [pc, #240]	; (80041b4 <_printf_i+0x23c>)
 80040c2:	6822      	ldr	r2, [r4, #0]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040ca:	f100 0504 	add.w	r5, r0, #4
 80040ce:	601d      	str	r5, [r3, #0]
 80040d0:	d001      	beq.n	80040d6 <_printf_i+0x15e>
 80040d2:	6803      	ldr	r3, [r0, #0]
 80040d4:	e002      	b.n	80040dc <_printf_i+0x164>
 80040d6:	0655      	lsls	r5, r2, #25
 80040d8:	d5fb      	bpl.n	80040d2 <_printf_i+0x15a>
 80040da:	8803      	ldrh	r3, [r0, #0]
 80040dc:	07d0      	lsls	r0, r2, #31
 80040de:	bf44      	itt	mi
 80040e0:	f042 0220 	orrmi.w	r2, r2, #32
 80040e4:	6022      	strmi	r2, [r4, #0]
 80040e6:	b91b      	cbnz	r3, 80040f0 <_printf_i+0x178>
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	f022 0220 	bic.w	r2, r2, #32
 80040ee:	6022      	str	r2, [r4, #0]
 80040f0:	2210      	movs	r2, #16
 80040f2:	e7b1      	b.n	8004058 <_printf_i+0xe0>
 80040f4:	4675      	mov	r5, lr
 80040f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80040fa:	fb02 3310 	mls	r3, r2, r0, r3
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004104:	4603      	mov	r3, r0
 8004106:	2800      	cmp	r0, #0
 8004108:	d1f5      	bne.n	80040f6 <_printf_i+0x17e>
 800410a:	e7b7      	b.n	800407c <_printf_i+0x104>
 800410c:	6808      	ldr	r0, [r1, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6949      	ldr	r1, [r1, #20]
 8004112:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004116:	d004      	beq.n	8004122 <_printf_i+0x1aa>
 8004118:	1d10      	adds	r0, r2, #4
 800411a:	6018      	str	r0, [r3, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	6019      	str	r1, [r3, #0]
 8004120:	e007      	b.n	8004132 <_printf_i+0x1ba>
 8004122:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004126:	f102 0004 	add.w	r0, r2, #4
 800412a:	6018      	str	r0, [r3, #0]
 800412c:	6813      	ldr	r3, [r2, #0]
 800412e:	d0f6      	beq.n	800411e <_printf_i+0x1a6>
 8004130:	8019      	strh	r1, [r3, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	4675      	mov	r5, lr
 8004138:	e7b1      	b.n	800409e <_printf_i+0x126>
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	1d11      	adds	r1, r2, #4
 800413e:	6019      	str	r1, [r3, #0]
 8004140:	6815      	ldr	r5, [r2, #0]
 8004142:	6862      	ldr	r2, [r4, #4]
 8004144:	2100      	movs	r1, #0
 8004146:	4628      	mov	r0, r5
 8004148:	f7fc f852 	bl	80001f0 <memchr>
 800414c:	b108      	cbz	r0, 8004152 <_printf_i+0x1da>
 800414e:	1b40      	subs	r0, r0, r5
 8004150:	6060      	str	r0, [r4, #4]
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	6123      	str	r3, [r4, #16]
 8004156:	2300      	movs	r3, #0
 8004158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800415c:	e79f      	b.n	800409e <_printf_i+0x126>
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	462a      	mov	r2, r5
 8004162:	4639      	mov	r1, r7
 8004164:	4630      	mov	r0, r6
 8004166:	47c0      	blx	r8
 8004168:	3001      	adds	r0, #1
 800416a:	d0a2      	beq.n	80040b2 <_printf_i+0x13a>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	079b      	lsls	r3, r3, #30
 8004170:	d507      	bpl.n	8004182 <_printf_i+0x20a>
 8004172:	2500      	movs	r5, #0
 8004174:	f104 0919 	add.w	r9, r4, #25
 8004178:	68e3      	ldr	r3, [r4, #12]
 800417a:	9a03      	ldr	r2, [sp, #12]
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	429d      	cmp	r5, r3
 8004180:	db05      	blt.n	800418e <_printf_i+0x216>
 8004182:	68e0      	ldr	r0, [r4, #12]
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	4298      	cmp	r0, r3
 8004188:	bfb8      	it	lt
 800418a:	4618      	movlt	r0, r3
 800418c:	e793      	b.n	80040b6 <_printf_i+0x13e>
 800418e:	2301      	movs	r3, #1
 8004190:	464a      	mov	r2, r9
 8004192:	4639      	mov	r1, r7
 8004194:	4630      	mov	r0, r6
 8004196:	47c0      	blx	r8
 8004198:	3001      	adds	r0, #1
 800419a:	d08a      	beq.n	80040b2 <_printf_i+0x13a>
 800419c:	3501      	adds	r5, #1
 800419e:	e7eb      	b.n	8004178 <_printf_i+0x200>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1a7      	bne.n	80040f4 <_printf_i+0x17c>
 80041a4:	780b      	ldrb	r3, [r1, #0]
 80041a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ae:	e765      	b.n	800407c <_printf_i+0x104>
 80041b0:	08004343 	.word	0x08004343
 80041b4:	08004332 	.word	0x08004332

080041b8 <memcpy>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	1e43      	subs	r3, r0, #1
 80041bc:	440a      	add	r2, r1
 80041be:	4291      	cmp	r1, r2
 80041c0:	d100      	bne.n	80041c4 <memcpy+0xc>
 80041c2:	bd10      	pop	{r4, pc}
 80041c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041cc:	e7f7      	b.n	80041be <memcpy+0x6>

080041ce <memmove>:
 80041ce:	4288      	cmp	r0, r1
 80041d0:	b510      	push	{r4, lr}
 80041d2:	eb01 0302 	add.w	r3, r1, r2
 80041d6:	d803      	bhi.n	80041e0 <memmove+0x12>
 80041d8:	1e42      	subs	r2, r0, #1
 80041da:	4299      	cmp	r1, r3
 80041dc:	d10c      	bne.n	80041f8 <memmove+0x2a>
 80041de:	bd10      	pop	{r4, pc}
 80041e0:	4298      	cmp	r0, r3
 80041e2:	d2f9      	bcs.n	80041d8 <memmove+0xa>
 80041e4:	1881      	adds	r1, r0, r2
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	42d3      	cmn	r3, r2
 80041ea:	d100      	bne.n	80041ee <memmove+0x20>
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041f6:	e7f7      	b.n	80041e8 <memmove+0x1a>
 80041f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004200:	e7eb      	b.n	80041da <memmove+0xc>

08004202 <_realloc_r>:
 8004202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004204:	4607      	mov	r7, r0
 8004206:	4614      	mov	r4, r2
 8004208:	460e      	mov	r6, r1
 800420a:	b921      	cbnz	r1, 8004216 <_realloc_r+0x14>
 800420c:	4611      	mov	r1, r2
 800420e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004212:	f7ff bc57 	b.w	8003ac4 <_malloc_r>
 8004216:	b922      	cbnz	r2, 8004222 <_realloc_r+0x20>
 8004218:	f7ff fc06 	bl	8003a28 <_free_r>
 800421c:	4625      	mov	r5, r4
 800421e:	4628      	mov	r0, r5
 8004220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004222:	f000 f814 	bl	800424e <_malloc_usable_size_r>
 8004226:	4284      	cmp	r4, r0
 8004228:	d90f      	bls.n	800424a <_realloc_r+0x48>
 800422a:	4621      	mov	r1, r4
 800422c:	4638      	mov	r0, r7
 800422e:	f7ff fc49 	bl	8003ac4 <_malloc_r>
 8004232:	4605      	mov	r5, r0
 8004234:	2800      	cmp	r0, #0
 8004236:	d0f2      	beq.n	800421e <_realloc_r+0x1c>
 8004238:	4631      	mov	r1, r6
 800423a:	4622      	mov	r2, r4
 800423c:	f7ff ffbc 	bl	80041b8 <memcpy>
 8004240:	4631      	mov	r1, r6
 8004242:	4638      	mov	r0, r7
 8004244:	f7ff fbf0 	bl	8003a28 <_free_r>
 8004248:	e7e9      	b.n	800421e <_realloc_r+0x1c>
 800424a:	4635      	mov	r5, r6
 800424c:	e7e7      	b.n	800421e <_realloc_r+0x1c>

0800424e <_malloc_usable_size_r>:
 800424e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004252:	2800      	cmp	r0, #0
 8004254:	f1a0 0004 	sub.w	r0, r0, #4
 8004258:	bfbc      	itt	lt
 800425a:	580b      	ldrlt	r3, [r1, r0]
 800425c:	18c0      	addlt	r0, r0, r3
 800425e:	4770      	bx	lr

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
